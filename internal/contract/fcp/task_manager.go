// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fcp

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TaskManagerFullTaskInfo is an auto generated low-level Go binding around an user-defined struct.
type TaskManagerFullTaskInfo struct {
	TaskUid            string
	CpList             []common.Address
	User               common.Address
	Reward             *big.Int
	Collateral         *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
	CollateralStatus   uint8
}

// FcpTaskManagerMetaData contains all meta data concerning the FcpTaskManager contract.
var FcpTaskManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"TaskExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"}],\"name\":\"TaskTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"URISubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cpAccountList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"assignTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralContract\",\"outputs\":[{\"internalType\":\"contractCollateralV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"completeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"extraDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"name\":\"extendTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"getTaskInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enumTaskManager.TaskStatus\",\"name\":\"taskStatus\",\"type\":\"uint8\"},{\"internalType\":\"enumCollateralV2.CollateralStatus\",\"name\":\"collateralStatus\",\"type\":\"uint8\"}],\"internalType\":\"structTaskManager.FullTaskInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"releaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollateralContract\",\"type\":\"address\"}],\"name\":\"setCollateralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultUri\",\"type\":\"string\"}],\"name\":\"submitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enumTaskManager.TaskStatus\",\"name\":\"taskStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"terminateTime\",\"type\":\"uint256\"}],\"name\":\"terminateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5061005261005760201b60201c565b6101f1565b600060019054906101000a900460ff16156100a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009e9061019a565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff16146101155760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405161010c91906101d6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000610184602783610117565b915061018f82610128565b604082019050919050565b600060208201905081810360008301526101b381610177565b9050919050565b600060ff82169050919050565b6101d0816101ba565b82525050565b60006020820190506101eb60008301846101c7565b92915050565b60805161506861022860003960008181610a2e01528181610abc0152818161116a015281816111f801526112a801526150686000f3fe60806040526004361061014b5760003560e01c806369ab84f2116100b6578063e941cd061161006f578063e941cd0614610461578063ed7bb9d11461048a578063f2fde38b146104b3578063f7c618c1146104dc578063f8c8765e14610507578063fe8d3188146105305761014b565b806369ab84f21461037757806370480275146103a2578063715018a6146103cb5780638da5cb5b146103e25780639a8afe9c1461040d578063c6e1c7c9146104365761014b565b80633b97f5b3116101085780633b97f5b31461026e5780634dc74d22146102975780634f1ef286146102c257806352d1902d146102de57806354fd4d501461030957806358709cf2146103345761014b565b80631785f53c146101505780631b209463146101795780631b622fa8146101b657806324d7806c146101df5780633659cfe61461021c578063394c244b14610245575b600080fd5b34801561015c57600080fd5b50610177600480360381019061017291906131cb565b610559565b005b34801561018557600080fd5b506101a0600480360381019061019b919061333e565b6105bc565b6040516101ad919061367d565b60405180910390f35b3480156101c257600080fd5b506101dd60048036038101906101d8919061369f565b61091d565b005b3480156101eb57600080fd5b50610206600480360381019061020191906131cb565b610a0c565b6040516102139190613732565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e91906131cb565b610a2c565b005b34801561025157600080fd5b5061026c6004803603810190610267919061333e565b610bb4565b005b34801561027a57600080fd5b5061029560048036038101906102909190613779565b610f76565b005b3480156102a357600080fd5b506102ac611142565b6040516102b991906137f7565b60405180910390f35b6102dc60048036038101906102d791906138b3565b611168565b005b3480156102ea57600080fd5b506102f36112a4565b6040516103009190613928565b60405180910390f35b34801561031557600080fd5b5061031e61135d565b60405161032b9190613952565b60405180910390f35b34801561034057600080fd5b5061035b6004803603810190610356919061333e565b611366565b60405161036e97969594939291906139c6565b60405180910390f35b34801561038357600080fd5b5061038c611473565b60405161039991906137f7565b60405180910390f35b3480156103ae57600080fd5b506103c960048036038101906103c491906131cb565b611499565b005b3480156103d757600080fd5b506103e06114fc565b005b3480156103ee57600080fd5b506103f7611510565b60405161040491906137f7565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f9190613b04565b61153a565b005b34801561044257600080fd5b5061044b61189e565b6040516104589190613c28565b60405180910390f35b34801561046d57600080fd5b50610488600480360381019061048391906131cb565b6118c4565b005b34801561049657600080fd5b506104b160048036038101906104ac9190613c43565b611910565b005b3480156104bf57600080fd5b506104da60048036038101906104d591906131cb565b611b5f565b005b3480156104e857600080fd5b506104f1611be2565b6040516104fe9190613cd2565b60405180910390f35b34801561051357600080fd5b5061052e60048036038101906105299190613ced565b611c08565b005b34801561053c57600080fd5b506105576004803603810190610552919061333e565b611eae565b005b61056161235a565b600060cd60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6105c4613025565b600060ce836040516105d69190613d90565b90815260200160405180910390206040518061010001604052908160008201805461060090613dd6565b80601f016020809104026020016040519081016040528092919081815260200182805461062c90613dd6565b80156106795780601f1061064e57610100808354040283529160200191610679565b820191906000526020600020905b81548152906001019060200180831161065c57829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561070757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106bd575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff1660038111156107b3576107b26134dd565b5b60038111156107c5576107c46134dd565b5b815250509050600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b209463856040518263ffffffff1660e01b81526004016108289190613e07565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061086e9190613f99565b905060405180610140016040528085815260200183602001518152602001836040015173ffffffffffffffffffffffffffffffffffffffff1681526020018360600151815260200182602001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015160038111156108f5576108f46134dd565b5b815260200182604001516002811115610911576109106134dd565b5b81525092505050919050565b60cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061097a5750610979826123d8565b5b6109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b09061402e565b60405180910390fd5b816040516109c79190613d90565b60405180910390207f2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe663383604051610a0092919061404e565b60405180910390a25050565b60cd6020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab1906140f0565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610af961256e565b73ffffffffffffffffffffffffffffffffffffffff1614610b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4690614182565b60405180910390fd5b610b58816125c5565b610bb181600067ffffffffffffffff811115610b7757610b76613213565b5b6040519080825280601f01601f191660200182016040528015610ba95781602001600182028036833780820191505090505b5060006125d0565b50565b60cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790614214565b60405180910390fd5b60016003811115610c5457610c536134dd565b5b60ce82604051610c649190613d90565b908152602001604051809103902060070160009054906101000a900460ff166003811115610c9557610c946134dd565b5b14610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc90614280565b60405180910390fd5b600260ce82604051610ce79190613d90565b908152602001604051809103902060070160006101000a81548160ff02191690836003811115610d1a57610d196134dd565b5b021790555060006064600560ce84604051610d359190613d90565b908152602001604051809103902060030154610d5191906142cf565b610d5b9190614340565b90506000811115610f30578060ce83604051610d779190613d90565b90815260200160405180910390206003016000828254610d979190614371565b9250508190555060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610e41939291906143a5565b6020604051808303816000875af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e849190614408565b5060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ecc9190613d90565b60405180910390207f6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d260ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604051610f27929190614435565b60405180910390a35b81604051610f3e9190613d90565b60405180910390207f2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf87588060405160405180910390a25050565b60cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff990614214565b60405180910390fd5b60016003811115611016576110156134dd565b5b60ce846040516110269190613d90565b908152602001604051809103902060070160009054906101000a900460ff166003811115611057576110566134dd565b5b0361113d578160ce8460405161106d9190613d90565b9081526020016040518091039020600601600082825461108d919061445e565b925050819055508060ce846040516110a59190613d90565b908152602001604051809103902060030160008282546110c5919061445e565b92505081905550826040516110da9190613d90565b60405180910390207fd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c8360ce866040516111149190613d90565b908152602001604051809103902060060154604051611134929190614492565b60405180910390a25b505050565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036111f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ed906140f0565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661123561256e565b73ffffffffffffffffffffffffffffffffffffffff161461128b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128290614182565b60405180910390fd5b611294826125c5565b6112a0828260016125d0565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b9061452d565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006002905090565b60ce8180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461139f90613dd6565b80601f01602080910402602001604051908101604052809291908181526020018280546113cb90613dd6565b80156114185780601f106113ed57610100808354040283529160200191611418565b820191906000526020600020905b8154815290600101906020018083116113fb57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905087565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114a161235a565b600160cd60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61150461235a565b61150e600061273e565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90614214565b60405180910390fd5b600060038111156115da576115d96134dd565b5b60ce876040516115ea9190613d90565b908152602001604051809103902060070160009054906101000a900460ff16600381111561161b5761161a6134dd565b5b1461165b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165290614599565b60405180910390fd5b6040518061010001604052808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815260200160008152602001828152602001600160038111156116bc576116bb6134dd565b5b81525060ce876040516116cf9190613d90565b908152602001604051809103902060008201518160000190816116f2919061475b565b50602082015181600101908051906020019061170f9291906130b2565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360038111156117aa576117a96134dd565b5b021790555090505060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663853911b28787856040518463ffffffff1660e01b81526004016118119392919061489c565b600060405180830381600087803b15801561182b57600080fd5b505af115801561183f573d6000803e3d6000fd5b50505050856040516118519190613d90565b60405180910390207f1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d379518686868560405161188e94939291906148e1565b60405180910390a2505050505050565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118cc61235a565b8060c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661199c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199390614214565b60405180910390fd5b600160038111156119b0576119af6134dd565b5b60ce836040516119c09190613d90565b908152602001604051809103902060070160009054906101000a900460ff1660038111156119f1576119f06134dd565b5b14611a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2890614280565b60405180910390fd5b60ce82604051611a419190613d90565b908152602001604051809103902060040154811015611a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8c9061499f565b60405180910390fd5b600360ce83604051611aa79190613d90565b908152602001604051809103902060070160006101000a81548160ff02191690836003811115611ada57611ad96134dd565b5b02179055508060ce83604051611af09190613d90565b908152602001604051809103902060050181905550611b0e82611eae565b81604051611b1c9190613d90565b60405180910390207f58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a3682604051611b539190613952565b60405180910390a25050565b611b6761235a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcd90614a31565b60405180910390fd5b611bdf8161273e565b50565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff16159050808015611c395750600160008054906101000a900460ff1660ff16105b80611c665750611c4830612804565b158015611c655750600160008054906101000a900460ff1660ff16145b5b611ca5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9c90614ac3565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611ce2576001600060016101000a81548160ff0219169083151502179055505b611cea612827565b611cf2612880565b8260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015611ea75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611e9e9190614b2b565b60405180910390a15b5050505050565b60cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3190614214565b60405180910390fd5b600060ce82604051611f4c9190613d90565b9081526020016040518091039020905060026003811115611f7057611f6f6134dd565b5b8160070160009054906101000a900460ff166003811115611f9457611f936134dd565b5b0361203f57612030828260010180548060200260200160405190810160405280929190818152602001828054801561202157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fd7575b505050505083600301546128d1565b60008160030181905550612356565b600380811115612052576120516134dd565b5b8160070160009054906101000a900460ff166003811115612076576120756134dd565b5b0361231a576000816004015482600501546120919190614371565b905081600601548111156120a757816006015490505b600082600601548284600301546120be91906142cf565b6120c89190614340565b905061215d848460010180548060200260200160405190810160405280929190818152602001828054801561215257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612108575b5050505050836128d1565b600081846003015461216f9190614371565b905060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401612216939291906143a5565b6020604051808303816000875af1158015612235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122599190614408565b508360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856040516122a39190613d90565b60405180910390207f6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d28660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604051612300929190614435565b60405180910390a360008460030181905550505050612355565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234c90614bb8565b60405180910390fd5b5b5050565b612362612cfc565b73ffffffffffffffffffffffffffffffffffffffff16612380611510565b73ffffffffffffffffffffffffffffffffffffffff16146123d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123cd90614c24565b60405180910390fd5b565b60008060ce836040516123eb9190613d90565b908152602001604051809103902060010180548060200260200160405190810160405280929190818152602001828054801561247c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612432575b5050505050905060005b8151811015612562573373ffffffffffffffffffffffffffffffffffffffff168282815181106124b9576124b8614c44565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252f9190614c73565b73ffffffffffffffffffffffffffffffffffffffff160361255557600192505050612569565b8080600101915050612486565b5060009150505b919050565b600061259c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612d04565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6125cd61235a565b50565b6125fc7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612d0e565b60000160009054906101000a900460ff16156126205761261b83612d18565b612739565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561268857506040513d601f19601f820116820180604052508101906126859190614ccc565b60015b6126c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126be90614d6b565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461272c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272390614dfd565b60405180910390fd5b50612738838383612dd1565b5b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286d90614e8f565b60405180910390fd5b61287e612dfd565b565b600060019054906101000a900460ff166128cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c690614e8f565b60405180910390fd5b565b600060018351036128e457819050612900565b6064604b836128f391906142cf565b6128fd9190614340565b90505b60008360008151811061291657612915614c44565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663565a2e2c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298c9190614c73565b905060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683856040518463ffffffff1660e01b8152600401612a0f939291906143a5565b6020604051808303816000875af1158015612a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a529190614408565b5083600081518110612a6757612a66614c44565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1685604051612a939190613d90565b60405180910390207f6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d28385604051612acc929190614435565b60405180910390a36000600190505b8451811015612cf45760018551612af29190614371565b6064601986612b0191906142cf565b612b0b9190614340565b612b159190614340565b9250848181518110612b2a57612b29614c44565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663565a2e2c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba09190614c73565b915060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684866040518463ffffffff1660e01b8152600401612c23939291906143a5565b6020604051808303816000875af1158015612c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c669190614408565b50848181518110612c7a57612c79614c44565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686604051612ca69190613d90565b60405180910390207f6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d28486604051612cdf929190614435565b60405180910390a38080600101915050612adb565b505050505050565b600033905090565b6000819050919050565b6000819050919050565b612d2181612804565b612d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5790614f21565b60405180910390fd5b80612d8d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612d04565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612dda83612e5e565b600082511180612de75750805b15612df857612df68383612ead565b505b505050565b600060019054906101000a900460ff16612e4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4390614e8f565b60405180910390fd5b612e5c612e57612cfc565b61273e565b565b612e6781612d18565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612ed2838360405180606001604052806027815260200161500c60279139612eda565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051612f049190614f88565b600060405180830381855af49150503d8060008114612f3f576040519150601f19603f3d011682016040523d82523d6000602084013e612f44565b606091505b5091509150612f5586838387612f60565b925050509392505050565b60608315612fc2576000835103612fba57612f7a85612804565b612fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb090614feb565b60405180910390fd5b5b829050612fcd565b612fcc8383612fd5565b5b949350505050565b600082511115612fe85781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301c9190613e07565b60405180910390fd5b6040518061014001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160006003811115613093576130926134dd565b5b8152602001600060028111156130ac576130ab6134dd565b5b81525090565b82805482825590600052602060002090810192821561312b579160200282015b8281111561312a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906130d2565b5b509050613138919061313c565b5090565b5b8082111561315557600081600090555060010161313d565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131988261316d565b9050919050565b6131a88161318d565b81146131b357600080fd5b50565b6000813590506131c58161319f565b92915050565b6000602082840312156131e1576131e0613163565b5b60006131ef848285016131b6565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61324b82613202565b810181811067ffffffffffffffff8211171561326a57613269613213565b5b80604052505050565b600061327d613159565b90506132898282613242565b919050565b600067ffffffffffffffff8211156132a9576132a8613213565b5b6132b282613202565b9050602081019050919050565b82818337600083830152505050565b60006132e16132dc8461328e565b613273565b9050828152602081018484840111156132fd576132fc6131fd565b5b6133088482856132bf565b509392505050565b600082601f830112613325576133246131f8565b5b81356133358482602086016132ce565b91505092915050565b60006020828403121561335457613353613163565b5b600082013567ffffffffffffffff81111561337257613371613168565b5b61337e84828501613310565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156133c15780820151818401526020810190506133a6565b60008484015250505050565b60006133d882613387565b6133e28185613392565b93506133f28185602086016133a3565b6133fb81613202565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61343b8161318d565b82525050565b600061344d8383613432565b60208301905092915050565b6000602082019050919050565b600061347182613406565b61347b8185613411565b935061348683613422565b8060005b838110156134b757815161349e8882613441565b97506134a983613459565b92505060018101905061348a565b5085935050505092915050565b6000819050919050565b6134d7816134c4565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061351d5761351c6134dd565b5b50565b600081905061352e8261350c565b919050565b600061353e82613520565b9050919050565b61354e81613533565b82525050565b60038110613565576135646134dd565b5b50565b600081905061357682613554565b919050565b600061358682613568565b9050919050565b6135968161357b565b82525050565b60006101408301600083015184820360008601526135ba82826133cd565b915050602083015184820360208601526135d48282613466565b91505060408301516135e96040860182613432565b5060608301516135fc60608601826134ce565b50608083015161360f60808601826134ce565b5060a083015161362260a08601826134ce565b5060c083015161363560c08601826134ce565b5060e083015161364860e08601826134ce565b5061010083015161365d610100860182613545565b5061012083015161367261012086018261358d565b508091505092915050565b60006020820190508181036000830152613697818461359c565b905092915050565b600080604083850312156136b6576136b5613163565b5b600083013567ffffffffffffffff8111156136d4576136d3613168565b5b6136e085828601613310565b925050602083013567ffffffffffffffff81111561370157613700613168565b5b61370d85828601613310565b9150509250929050565b60008115159050919050565b61372c81613717565b82525050565b60006020820190506137476000830184613723565b92915050565b613756816134c4565b811461376157600080fd5b50565b6000813590506137738161374d565b92915050565b60008060006060848603121561379257613791613163565b5b600084013567ffffffffffffffff8111156137b0576137af613168565b5b6137bc86828701613310565b93505060206137cd86828701613764565b92505060406137de86828701613764565b9150509250925092565b6137f18161318d565b82525050565b600060208201905061380c60008301846137e8565b92915050565b600067ffffffffffffffff82111561382d5761382c613213565b5b61383682613202565b9050602081019050919050565b600061385661385184613812565b613273565b905082815260208101848484011115613872576138716131fd565b5b61387d8482856132bf565b509392505050565b600082601f83011261389a576138996131f8565b5b81356138aa848260208601613843565b91505092915050565b600080604083850312156138ca576138c9613163565b5b60006138d8858286016131b6565b925050602083013567ffffffffffffffff8111156138f9576138f8613168565b5b61390585828601613885565b9150509250929050565b6000819050919050565b6139228161390f565b82525050565b600060208201905061393d6000830184613919565b92915050565b61394c816134c4565b82525050565b60006020820190506139676000830184613943565b92915050565b600082825260208201905092915050565b600061398982613387565b613993818561396d565b93506139a38185602086016133a3565b6139ac81613202565b840191505092915050565b6139c081613533565b82525050565b600060e08201905081810360008301526139e0818a61397e565b90506139ef60208301896137e8565b6139fc6040830188613943565b613a096060830187613943565b613a166080830186613943565b613a2360a0830185613943565b613a3060c08301846139b7565b98975050505050505050565b600067ffffffffffffffff821115613a5757613a56613213565b5b602082029050602081019050919050565b600080fd5b6000613a80613a7b84613a3c565b613273565b90508083825260208201905060208402830185811115613aa357613aa2613a68565b5b835b81811015613acc5780613ab888826131b6565b845260208401935050602081019050613aa5565b5050509392505050565b600082601f830112613aeb57613aea6131f8565b5b8135613afb848260208601613a6d565b91505092915050565b60008060008060008060c08789031215613b2157613b20613163565b5b600087013567ffffffffffffffff811115613b3f57613b3e613168565b5b613b4b89828a01613310565b965050602087013567ffffffffffffffff811115613b6c57613b6b613168565b5b613b7889828a01613ad6565b9550506040613b8989828a016131b6565b9450506060613b9a89828a01613764565b9350506080613bab89828a01613764565b92505060a0613bbc89828a01613764565b9150509295509295509295565b6000819050919050565b6000613bee613be9613be48461316d565b613bc9565b61316d565b9050919050565b6000613c0082613bd3565b9050919050565b6000613c1282613bf5565b9050919050565b613c2281613c07565b82525050565b6000602082019050613c3d6000830184613c19565b92915050565b60008060408385031215613c5a57613c59613163565b5b600083013567ffffffffffffffff811115613c7857613c77613168565b5b613c8485828601613310565b9250506020613c9585828601613764565b9150509250929050565b6000613caa82613bd3565b9050919050565b6000613cbc82613c9f565b9050919050565b613ccc81613cb1565b82525050565b6000602082019050613ce76000830184613cc3565b92915050565b60008060008060808587031215613d0757613d06613163565b5b6000613d15878288016131b6565b9450506020613d26878288016131b6565b9350506040613d37878288016131b6565b9250506060613d48878288016131b6565b91505092959194509250565b600081905092915050565b6000613d6a82613387565b613d748185613d54565b9350613d848185602086016133a3565b80840191505092915050565b6000613d9c8284613d5f565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613dee57607f821691505b602082108103613e0157613e00613da7565b5b50919050565b60006020820190508181036000830152613e21818461397e565b905092915050565b600080fd5b600080fd5b600081519050613e428161319f565b92915050565b6000613e5b613e5684613a3c565b613273565b90508083825260208201905060208402830185811115613e7e57613e7d613a68565b5b835b81811015613ea75780613e938882613e33565b845260208401935050602081019050613e80565b5050509392505050565b600082601f830112613ec657613ec56131f8565b5b8151613ed6848260208601613e48565b91505092915050565b600081519050613eee8161374d565b92915050565b60038110613f0157600080fd5b50565b600081519050613f1381613ef4565b92915050565b600060608284031215613f2f57613f2e613e29565b5b613f396060613273565b9050600082015167ffffffffffffffff811115613f5957613f58613e2e565b5b613f6584828501613eb1565b6000830152506020613f7984828501613edf565b6020830152506040613f8d84828501613f04565b60408301525092915050565b600060208284031215613faf57613fae613163565b5b600082015167ffffffffffffffff811115613fcd57613fcc613168565b5b613fd984828501613f19565b91505092915050565b7f73656e646572206973206e6f7420696e2063704c697374000000000000000000600082015250565b600061401860178361396d565b915061402382613fe2565b602082019050919050565b600060208201905081810360008301526140478161400b565b9050919050565b600060408201905061406360008301856137e8565b8181036020830152614075818461397e565b90509392505050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006140da602c8361396d565b91506140e58261407e565b604082019050919050565b60006020820190508181036000830152614109816140cd565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b600061416c602c8361396d565b915061417782614110565b604082019050919050565b6000602082019050818103600083015261419b8161415f565b9050919050565b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b60006141fe60268361396d565b9150614209826141a2565b604082019050919050565b6000602082019050818103600083015261422d816141f1565b9050919050565b7f7461736b206973206e6f7420696e2070726f6772657373000000000000000000600082015250565b600061426a60178361396d565b915061427582614234565b602082019050919050565b600060208201905081810360008301526142998161425d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142da826134c4565b91506142e5836134c4565b92508282026142f3816134c4565b9150828204841483151761430a576143096142a0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061434b826134c4565b9150614356836134c4565b92508261436657614365614311565b5b828204905092915050565b600061437c826134c4565b9150614387836134c4565b925082820390508181111561439f5761439e6142a0565b5b92915050565b60006060820190506143ba60008301866137e8565b6143c760208301856137e8565b6143d46040830184613943565b949350505050565b6143e581613717565b81146143f057600080fd5b50565b600081519050614402816143dc565b92915050565b60006020828403121561441e5761441d613163565b5b600061442c848285016143f3565b91505092915050565b600060408201905061444a60008301856137e8565b6144576020830184613943565b9392505050565b6000614469826134c4565b9150614474836134c4565b925082820190508082111561448c5761448b6142a0565b5b92915050565b60006040820190506144a76000830185613943565b6144b46020830184613943565b9392505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b600061451760388361396d565b9150614522826144bb565b604082019050919050565b600060208201905081810360008301526145468161450a565b9050919050565b7f7461736b55696420616c72656164792061737369676e65640000000000000000600082015250565b600061458360188361396d565b915061458e8261454d565b602082019050919050565b600060208201905081810360008301526145b281614576565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261461b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826145de565b61462586836145de565b95508019841693508086168417925050509392505050565b600061465861465361464e846134c4565b613bc9565b6134c4565b9050919050565b6000819050919050565b6146728361463d565b61468661467e8261465f565b8484546145eb565b825550505050565b600090565b61469b61468e565b6146a6818484614669565b505050565b5b818110156146ca576146bf600082614693565b6001810190506146ac565b5050565b601f82111561470f576146e0816145b9565b6146e9846145ce565b810160208510156146f8578190505b61470c614704856145ce565b8301826146ab565b50505b505050565b600082821c905092915050565b600061473260001984600802614714565b1980831691505092915050565b600061474b8383614721565b9150826002028217905092915050565b61476482613387565b67ffffffffffffffff81111561477d5761477c613213565b5b6147878254613dd6565b6147928282856146ce565b600060209050601f8311600181146147c557600084156147b3578287015190505b6147bd858261473f565b865550614825565b601f1984166147d3866145b9565b60005b828110156147fb578489015182556001820191506020850194506020810190506147d6565b868310156148185784890151614814601f891682614721565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b600061484982613406565b614853818561482d565b935061485e83613422565b8060005b8381101561488f5781516148768882613441565b975061488183613459565b925050600181019050614862565b5085935050505092915050565b600060608201905081810360008301526148b6818661397e565b905081810360208301526148ca818561483e565b90506148d96040830184613943565b949350505050565b600060808201905081810360008301526148fb818761483e565b905061490a60208301866137e8565b6149176040830185613943565b6149246060830184613943565b95945050505050565b7f7465726d696e6174652074696d65206d7573742062652061667465722073746160008201527f72742074696d6500000000000000000000000000000000000000000000000000602082015250565b600061498960278361396d565b91506149948261492d565b604082019050919050565b600060208201905081810360008301526149b88161497c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a1b60268361396d565b9150614a26826149bf565b604082019050919050565b60006020820190508181036000830152614a4a81614a0e565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614aad602e8361396d565b9150614ab882614a51565b604082019050919050565b60006020820190508181036000830152614adc81614aa0565b9050919050565b6000819050919050565b600060ff82169050919050565b6000614b15614b10614b0b84614ae3565b613bc9565b614aed565b9050919050565b614b2581614afa565b82525050565b6000602082019050614b406000830184614b1c565b92915050565b7f7461736b206973206e6f7420636f6d706c65746564206e6f72207465726d696e60008201527f6174656400000000000000000000000000000000000000000000000000000000602082015250565b6000614ba260248361396d565b9150614bad82614b46565b604082019050919050565b60006020820190508181036000830152614bd181614b95565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c0e60208361396d565b9150614c1982614bd8565b602082019050919050565b60006020820190508181036000830152614c3d81614c01565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215614c8957614c88613163565b5b6000614c9784828501613e33565b91505092915050565b614ca98161390f565b8114614cb457600080fd5b50565b600081519050614cc681614ca0565b92915050565b600060208284031215614ce257614ce1613163565b5b6000614cf084828501614cb7565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614d55602e8361396d565b9150614d6082614cf9565b604082019050919050565b60006020820190508181036000830152614d8481614d48565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614de760298361396d565b9150614df282614d8b565b604082019050919050565b60006020820190508181036000830152614e1681614dda565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614e79602b8361396d565b9150614e8482614e1d565b604082019050919050565b60006020820190508181036000830152614ea881614e6c565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614f0b602d8361396d565b9150614f1682614eaf565b604082019050919050565b60006020820190508181036000830152614f3a81614efe565b9050919050565b600081519050919050565b600081905092915050565b6000614f6282614f41565b614f6c8185614f4c565b9350614f7c8185602086016133a3565b80840191505092915050565b6000614f948284614f57565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614fd5601d8361396d565b9150614fe082614f9f565b602082019050919050565b6000602082019050818103600083015261500481614fc8565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220eecc94dadff2885ac6560016146b44ca303d952fb78bb1c44ca1bbae395b88d864736f6c63430008190033",
}

// FcpTaskManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use FcpTaskManagerMetaData.ABI instead.
var FcpTaskManagerABI = FcpTaskManagerMetaData.ABI

// FcpTaskManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FcpTaskManagerMetaData.Bin instead.
var FcpTaskManagerBin = FcpTaskManagerMetaData.Bin

// DeployFcpTaskManager deploys a new Ethereum contract, binding an instance of FcpTaskManager to it.
func DeployFcpTaskManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FcpTaskManager, error) {
	parsed, err := FcpTaskManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FcpTaskManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FcpTaskManager{FcpTaskManagerCaller: FcpTaskManagerCaller{contract: contract}, FcpTaskManagerTransactor: FcpTaskManagerTransactor{contract: contract}, FcpTaskManagerFilterer: FcpTaskManagerFilterer{contract: contract}}, nil
}

// FcpTaskManager is an auto generated Go binding around an Ethereum contract.
type FcpTaskManager struct {
	FcpTaskManagerCaller     // Read-only binding to the contract
	FcpTaskManagerTransactor // Write-only binding to the contract
	FcpTaskManagerFilterer   // Log filterer for contract events
}

// FcpTaskManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type FcpTaskManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FcpTaskManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FcpTaskManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FcpTaskManagerSession struct {
	Contract     *FcpTaskManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FcpTaskManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FcpTaskManagerCallerSession struct {
	Contract *FcpTaskManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// FcpTaskManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FcpTaskManagerTransactorSession struct {
	Contract     *FcpTaskManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// FcpTaskManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type FcpTaskManagerRaw struct {
	Contract *FcpTaskManager // Generic contract binding to access the raw methods on
}

// FcpTaskManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FcpTaskManagerCallerRaw struct {
	Contract *FcpTaskManagerCaller // Generic read-only contract binding to access the raw methods on
}

// FcpTaskManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FcpTaskManagerTransactorRaw struct {
	Contract *FcpTaskManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFcpTaskManager creates a new instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManager(address common.Address, backend bind.ContractBackend) (*FcpTaskManager, error) {
	contract, err := bindFcpTaskManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManager{FcpTaskManagerCaller: FcpTaskManagerCaller{contract: contract}, FcpTaskManagerTransactor: FcpTaskManagerTransactor{contract: contract}, FcpTaskManagerFilterer: FcpTaskManagerFilterer{contract: contract}}, nil
}

// NewFcpTaskManagerCaller creates a new read-only instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerCaller(address common.Address, caller bind.ContractCaller) (*FcpTaskManagerCaller, error) {
	contract, err := bindFcpTaskManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerCaller{contract: contract}, nil
}

// NewFcpTaskManagerTransactor creates a new write-only instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*FcpTaskManagerTransactor, error) {
	contract, err := bindFcpTaskManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTransactor{contract: contract}, nil
}

// NewFcpTaskManagerFilterer creates a new log filterer instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*FcpTaskManagerFilterer, error) {
	contract, err := bindFcpTaskManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerFilterer{contract: contract}, nil
}

// bindFcpTaskManager binds a generic wrapper to an already deployed contract.
func bindFcpTaskManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FcpTaskManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FcpTaskManager *FcpTaskManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FcpTaskManager.Contract.FcpTaskManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FcpTaskManager *FcpTaskManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.FcpTaskManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FcpTaskManager *FcpTaskManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.FcpTaskManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FcpTaskManager *FcpTaskManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FcpTaskManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FcpTaskManager *FcpTaskManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FcpTaskManager *FcpTaskManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.contract.Transact(opts, method, params...)
}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) ApWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "apWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) ApWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ApWallet(&_FcpTaskManager.CallOpts)
}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ApWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ApWallet(&_FcpTaskManager.CallOpts)
}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) ArWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "arWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) ArWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ArWallet(&_FcpTaskManager.CallOpts)
}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ArWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ArWallet(&_FcpTaskManager.CallOpts)
}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) CollateralContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "collateralContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) CollateralContract() (common.Address, error) {
	return _FcpTaskManager.Contract.CollateralContract(&_FcpTaskManager.CallOpts)
}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) CollateralContract() (common.Address, error) {
	return _FcpTaskManager.Contract.CollateralContract(&_FcpTaskManager.CallOpts)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerCaller) GetTaskInfo(opts *bind.CallOpts, taskUid string) (TaskManagerFullTaskInfo, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "getTaskInfo", taskUid)

	if err != nil {
		return *new(TaskManagerFullTaskInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(TaskManagerFullTaskInfo)).(*TaskManagerFullTaskInfo)

	return out0, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerSession) GetTaskInfo(taskUid string) (TaskManagerFullTaskInfo, error) {
	return _FcpTaskManager.Contract.GetTaskInfo(&_FcpTaskManager.CallOpts, taskUid)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerCallerSession) GetTaskInfo(taskUid string) (TaskManagerFullTaskInfo, error) {
	return _FcpTaskManager.Contract.GetTaskInfo(&_FcpTaskManager.CallOpts, taskUid)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _FcpTaskManager.Contract.IsAdmin(&_FcpTaskManager.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _FcpTaskManager.Contract.IsAdmin(&_FcpTaskManager.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) Owner() (common.Address, error) {
	return _FcpTaskManager.Contract.Owner(&_FcpTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Owner() (common.Address, error) {
	return _FcpTaskManager.Contract.Owner(&_FcpTaskManager.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerSession) ProxiableUUID() ([32]byte, error) {
	return _FcpTaskManager.Contract.ProxiableUUID(&_FcpTaskManager.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ProxiableUUID() ([32]byte, error) {
	return _FcpTaskManager.Contract.ProxiableUUID(&_FcpTaskManager.CallOpts)
}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) RewardToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "rewardToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) RewardToken() (common.Address, error) {
	return _FcpTaskManager.Contract.RewardToken(&_FcpTaskManager.CallOpts)
}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) RewardToken() (common.Address, error) {
	return _FcpTaskManager.Contract.RewardToken(&_FcpTaskManager.CallOpts)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerCaller) Tasks(opts *bind.CallOpts, arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "tasks", arg0)

	outstruct := new(struct {
		TaskUid            string
		User               common.Address
		Reward             *big.Int
		StartTimestamp     *big.Int
		TerminateTimestamp *big.Int
		Duration           *big.Int
		TaskStatus         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TaskUid = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.User = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Reward = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.StartTimestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TerminateTimestamp = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.TaskStatus = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerSession) Tasks(arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	return _FcpTaskManager.Contract.Tasks(&_FcpTaskManager.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Tasks(arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	return _FcpTaskManager.Contract.Tasks(&_FcpTaskManager.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) Version() (*big.Int, error) {
	return _FcpTaskManager.Contract.Version(&_FcpTaskManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Version() (*big.Int, error) {
	return _FcpTaskManager.Contract.Version(&_FcpTaskManager.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) AddAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "addAdmin", newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AddAdmin(&_FcpTaskManager.TransactOpts, newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AddAdmin(&_FcpTaskManager.TransactOpts, newAdmin)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) AssignTask(opts *bind.TransactOpts, taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "assignTask", taskUid, cpAccountList, user, reward, collateral, duration)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerSession) AssignTask(taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AssignTask(&_FcpTaskManager.TransactOpts, taskUid, cpAccountList, user, reward, collateral, duration)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) AssignTask(taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AssignTask(&_FcpTaskManager.TransactOpts, taskUid, cpAccountList, user, reward, collateral, duration)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) CompleteTask(opts *bind.TransactOpts, taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "completeTask", taskUid)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerSession) CompleteTask(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask(&_FcpTaskManager.TransactOpts, taskUid)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) CompleteTask(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask(&_FcpTaskManager.TransactOpts, taskUid)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) ExtendTask(opts *bind.TransactOpts, taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "extendTask", taskUid, extraDuration, extraReward)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerSession) ExtendTask(taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ExtendTask(&_FcpTaskManager.TransactOpts, taskUid, extraDuration, extraReward)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) ExtendTask(taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ExtendTask(&_FcpTaskManager.TransactOpts, taskUid, extraDuration, extraReward)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) Initialize(opts *bind.TransactOpts, ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "initialize", ar, ap, collateralContractAddress, rewardTokenAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerSession) Initialize(ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.Initialize(&_FcpTaskManager.TransactOpts, ar, ap, collateralContractAddress, rewardTokenAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) Initialize(ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.Initialize(&_FcpTaskManager.TransactOpts, ar, ap, collateralContractAddress, rewardTokenAddress)
}

// ReleaseReward is a paid mutator transaction binding the contract method 0xfe8d3188.
//
// Solidity: function releaseReward(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) ReleaseReward(opts *bind.TransactOpts, taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "releaseReward", taskUid)
}

// ReleaseReward is a paid mutator transaction binding the contract method 0xfe8d3188.
//
// Solidity: function releaseReward(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerSession) ReleaseReward(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ReleaseReward(&_FcpTaskManager.TransactOpts, taskUid)
}

// ReleaseReward is a paid mutator transaction binding the contract method 0xfe8d3188.
//
// Solidity: function releaseReward(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) ReleaseReward(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ReleaseReward(&_FcpTaskManager.TransactOpts, taskUid)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) RemoveAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "removeAdmin", admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RemoveAdmin(&_FcpTaskManager.TransactOpts, admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RemoveAdmin(&_FcpTaskManager.TransactOpts, admin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RenounceOwnership(&_FcpTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RenounceOwnership(&_FcpTaskManager.TransactOpts)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) SetCollateralContract(opts *bind.TransactOpts, newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "setCollateralContract", newCollateralContract)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerSession) SetCollateralContract(newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SetCollateralContract(&_FcpTaskManager.TransactOpts, newCollateralContract)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) SetCollateralContract(newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SetCollateralContract(&_FcpTaskManager.TransactOpts, newCollateralContract)
}

// SubmitResult is a paid mutator transaction binding the contract method 0x1b622fa8.
//
// Solidity: function submitResult(string taskUid, string resultUri) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) SubmitResult(opts *bind.TransactOpts, taskUid string, resultUri string) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "submitResult", taskUid, resultUri)
}

// SubmitResult is a paid mutator transaction binding the contract method 0x1b622fa8.
//
// Solidity: function submitResult(string taskUid, string resultUri) returns()
func (_FcpTaskManager *FcpTaskManagerSession) SubmitResult(taskUid string, resultUri string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SubmitResult(&_FcpTaskManager.TransactOpts, taskUid, resultUri)
}

// SubmitResult is a paid mutator transaction binding the contract method 0x1b622fa8.
//
// Solidity: function submitResult(string taskUid, string resultUri) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) SubmitResult(taskUid string, resultUri string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SubmitResult(&_FcpTaskManager.TransactOpts, taskUid, resultUri)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) TerminateTask(opts *bind.TransactOpts, taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "terminateTask", taskUid, terminateTime)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerSession) TerminateTask(taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TerminateTask(&_FcpTaskManager.TransactOpts, taskUid, terminateTime)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) TerminateTask(taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TerminateTask(&_FcpTaskManager.TransactOpts, taskUid, terminateTime)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TransferOwnership(&_FcpTaskManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TransferOwnership(&_FcpTaskManager.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_FcpTaskManager *FcpTaskManagerSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeTo(&_FcpTaskManager.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeTo(&_FcpTaskManager.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeToAndCall(&_FcpTaskManager.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeToAndCall(&_FcpTaskManager.TransactOpts, newImplementation, data)
}

// FcpTaskManagerAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the FcpTaskManager contract.
type FcpTaskManagerAdminChangedIterator struct {
	Event *FcpTaskManagerAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerAdminChanged represents a AdminChanged event raised by the FcpTaskManager contract.
type FcpTaskManagerAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*FcpTaskManagerAdminChangedIterator, error) {

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerAdminChangedIterator{contract: _FcpTaskManager.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerAdminChanged) (event.Subscription, error) {

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerAdminChanged)
				if err := _FcpTaskManager.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseAdminChanged(log types.Log) (*FcpTaskManagerAdminChanged, error) {
	event := new(FcpTaskManagerAdminChanged)
	if err := _FcpTaskManager.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the FcpTaskManager contract.
type FcpTaskManagerBeaconUpgradedIterator struct {
	Event *FcpTaskManagerBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerBeaconUpgraded represents a BeaconUpgraded event raised by the FcpTaskManager contract.
type FcpTaskManagerBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*FcpTaskManagerBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerBeaconUpgradedIterator{contract: _FcpTaskManager.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerBeaconUpgraded)
				if err := _FcpTaskManager.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseBeaconUpgraded(log types.Log) (*FcpTaskManagerBeaconUpgraded, error) {
	event := new(FcpTaskManagerBeaconUpgraded)
	if err := _FcpTaskManager.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FcpTaskManager contract.
type FcpTaskManagerInitializedIterator struct {
	Event *FcpTaskManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerInitialized represents a Initialized event raised by the FcpTaskManager contract.
type FcpTaskManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*FcpTaskManagerInitializedIterator, error) {

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerInitializedIterator{contract: _FcpTaskManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerInitialized)
				if err := _FcpTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseInitialized(log types.Log) (*FcpTaskManagerInitialized, error) {
	event := new(FcpTaskManagerInitialized)
	if err := _FcpTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FcpTaskManager contract.
type FcpTaskManagerOwnershipTransferredIterator struct {
	Event *FcpTaskManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerOwnershipTransferred represents a OwnershipTransferred event raised by the FcpTaskManager contract.
type FcpTaskManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FcpTaskManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerOwnershipTransferredIterator{contract: _FcpTaskManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerOwnershipTransferred)
				if err := _FcpTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseOwnershipTransferred(log types.Log) (*FcpTaskManagerOwnershipTransferred, error) {
	event := new(FcpTaskManagerOwnershipTransferred)
	if err := _FcpTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardReleasedIterator is returned from FilterRewardReleased and is used to iterate over the raw logs and unpacked data for RewardReleased events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReleasedIterator struct {
	Event *FcpTaskManagerRewardReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardReleased represents a RewardReleased event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReleased struct {
	TaskUid      common.Hash
	CpAccount    common.Address
	Beneficiary  common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardReleased is a free log retrieval operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardReleased(opts *bind.FilterOpts, taskUid []string, cpAccount []common.Address) (*FcpTaskManagerRewardReleasedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardReleased", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardReleasedIterator{contract: _FcpTaskManager.contract, event: "RewardReleased", logs: logs, sub: sub}, nil
}

// WatchRewardReleased is a free log subscription operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardReleased(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardReleased, taskUid []string, cpAccount []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardReleased", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardReleased)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReleased is a log parse operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardReleased(log types.Log) (*FcpTaskManagerRewardReleased, error) {
	event := new(FcpTaskManagerRewardReleased)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskCompletedIterator is returned from FilterTaskCompleted and is used to iterate over the raw logs and unpacked data for TaskCompleted events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCompletedIterator struct {
	Event *FcpTaskManagerTaskCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskCompleted represents a TaskCompleted event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCompleted struct {
	TaskUid common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTaskCompleted is a free log retrieval operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskCompleted(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskCompletedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskCompleted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskCompletedIterator{contract: _FcpTaskManager.contract, event: "TaskCompleted", logs: logs, sub: sub}, nil
}

// WatchTaskCompleted is a free log subscription operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskCompleted(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskCompleted, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskCompleted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskCompleted)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCompleted is a log parse operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskCompleted(log types.Log) (*FcpTaskManagerTaskCompleted, error) {
	event := new(FcpTaskManagerTaskCompleted)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskCreatedIterator is returned from FilterTaskCreated and is used to iterate over the raw logs and unpacked data for TaskCreated events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCreatedIterator struct {
	Event *FcpTaskManagerTaskCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskCreated represents a TaskCreated event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCreated struct {
	TaskUid  common.Hash
	CpList   []common.Address
	User     common.Address
	Reward   *big.Int
	Duration *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTaskCreated is a free log retrieval operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskCreated(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskCreatedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskCreated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskCreatedIterator{contract: _FcpTaskManager.contract, event: "TaskCreated", logs: logs, sub: sub}, nil
}

// WatchTaskCreated is a free log subscription operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskCreated, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskCreated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskCreated)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCreated is a log parse operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskCreated(log types.Log) (*FcpTaskManagerTaskCreated, error) {
	event := new(FcpTaskManagerTaskCreated)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskExtendedIterator is returned from FilterTaskExtended and is used to iterate over the raw logs and unpacked data for TaskExtended events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskExtendedIterator struct {
	Event *FcpTaskManagerTaskExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskExtended represents a TaskExtended event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskExtended struct {
	TaskUid       common.Hash
	AddedDuration *big.Int
	TotalDuration *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTaskExtended is a free log retrieval operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskExtended(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskExtendedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskExtended", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskExtendedIterator{contract: _FcpTaskManager.contract, event: "TaskExtended", logs: logs, sub: sub}, nil
}

// WatchTaskExtended is a free log subscription operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskExtended(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskExtended, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskExtended", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskExtended)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskExtended is a log parse operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskExtended(log types.Log) (*FcpTaskManagerTaskExtended, error) {
	event := new(FcpTaskManagerTaskExtended)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskTerminatedIterator is returned from FilterTaskTerminated and is used to iterate over the raw logs and unpacked data for TaskTerminated events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskTerminatedIterator struct {
	Event *FcpTaskManagerTaskTerminated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskTerminatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskTerminated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskTerminated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskTerminatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskTerminatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskTerminated represents a TaskTerminated event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskTerminated struct {
	TaskUid            common.Hash
	TerminateTimestamp *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterTaskTerminated is a free log retrieval operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskTerminated(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskTerminatedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskTerminated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskTerminatedIterator{contract: _FcpTaskManager.contract, event: "TaskTerminated", logs: logs, sub: sub}, nil
}

// WatchTaskTerminated is a free log subscription operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskTerminated(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskTerminated, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskTerminated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskTerminated)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskTerminated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskTerminated is a log parse operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskTerminated(log types.Log) (*FcpTaskManagerTaskTerminated, error) {
	event := new(FcpTaskManagerTaskTerminated)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskTerminated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerURISubmittedIterator is returned from FilterURISubmitted and is used to iterate over the raw logs and unpacked data for URISubmitted events raised by the FcpTaskManager contract.
type FcpTaskManagerURISubmittedIterator struct {
	Event *FcpTaskManagerURISubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerURISubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerURISubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerURISubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerURISubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerURISubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerURISubmitted represents a URISubmitted event raised by the FcpTaskManager contract.
type FcpTaskManagerURISubmitted struct {
	TaskUid   common.Hash
	Submitter common.Address
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterURISubmitted is a free log retrieval operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterURISubmitted(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerURISubmittedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "URISubmitted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerURISubmittedIterator{contract: _FcpTaskManager.contract, event: "URISubmitted", logs: logs, sub: sub}, nil
}

// WatchURISubmitted is a free log subscription operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchURISubmitted(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerURISubmitted, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "URISubmitted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerURISubmitted)
				if err := _FcpTaskManager.contract.UnpackLog(event, "URISubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURISubmitted is a log parse operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseURISubmitted(log types.Log) (*FcpTaskManagerURISubmitted, error) {
	event := new(FcpTaskManagerURISubmitted)
	if err := _FcpTaskManager.contract.UnpackLog(event, "URISubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the FcpTaskManager contract.
type FcpTaskManagerUpgradedIterator struct {
	Event *FcpTaskManagerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerUpgraded represents a Upgraded event raised by the FcpTaskManager contract.
type FcpTaskManagerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*FcpTaskManagerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerUpgradedIterator{contract: _FcpTaskManager.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerUpgraded)
				if err := _FcpTaskManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseUpgraded(log types.Log) (*FcpTaskManagerUpgraded, error) {
	event := new(FcpTaskManagerUpgraded)
	if err := _FcpTaskManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
