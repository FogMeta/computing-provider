// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fcp

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TaskManagerFullTaskInfo is an auto generated low-level Go binding around an user-defined struct.
type TaskManagerFullTaskInfo struct {
	TaskUid            string
	CpList             []common.Address
	User               common.Address
	Reward             *big.Int
	Collateral         *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
	CollateralStatus   uint8
}

// FcpTaskManagerMetaData contains all meta data concerning the FcpTaskManager contract.
var FcpTaskManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"payday\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardReadyToClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"TaskExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"}],\"name\":\"TaskTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"URISubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cpAccountList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"assignTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jobUid\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralContract\",\"outputs\":[{\"internalType\":\"contractCollateralV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"collateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"completeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"remainingCpList\",\"type\":\"address[]\"}],\"name\":\"completeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"extraDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"name\":\"extendTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"getTaskInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enumTaskManager.TaskStatus\",\"name\":\"taskStatus\",\"type\":\"uint8\"},{\"internalType\":\"enumCollateralV2.CollateralStatus\",\"name\":\"collateralStatus\",\"type\":\"uint8\"}],\"internalType\":\"structTaskManager.FullTaskInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"}],\"name\":\"getTaskReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isSignatureUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollateralContract\",\"type\":\"address\"}],\"name\":\"setCollateralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enumTaskManager.TaskStatus\",\"name\":\"taskStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"terminateTime\",\"type\":\"uint256\"}],\"name\":\"terminateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5061005261005760201b60201c565b6101c1565b600061006761015b60201b60201c565b90508060000160089054906101000a900460ff16156100b2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101585767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161014f91906101a6565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b6101a081610183565b82525050565b60006020820190506101bb6000830184610197565b92915050565b6080516151f56101ea60003960008181612790015281816127e501526129a001526151f56000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063d038d1ea11610095578063eef74fc711610064578063eef74fc71461065d578063f2fde38b14610686578063f7c618c1146106af578063f8c8765e146106da576101c2565b8063d038d1ea146105a5578063e941cd06146105ce578063e9503425146105f7578063ed7bb9d114610634576101c2565b8063a718a952116100d1578063a718a952146104d5578063a947898814610512578063ad3cb1cc1461054f578063c6e1c7c91461057a576101c2565b8063715018a61461046a5780638da5cb5b146104815780639a8afe9c146104ac576101c2565b80634f1ef2861161016457806358709cf21161013e57806358709cf21461039657806369ab84f2146103d95780636e1e063f146104045780637048027514610441576101c2565b80634f1ef2861461032457806352d1902d1461034057806354fd4d501461036b576101c2565b806324d7806c116101a057806324d7806c1461026a578063394c244b146102a75780633b97f5b3146102d05780634dc74d22146102f9576101c2565b80631150f0f3146101c75780631785f53c146102045780631b2094631461022d575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190613885565b610703565b6040516101fb91906138e9565b60405180910390f35b34801561021057600080fd5b5061022b60048036038101906102269190613962565b610739565b005b34801561023957600080fd5b50610254600480360381019061024f9190613a30565b61079c565b6040516102619190613d6f565b60405180910390f35b34801561027657600080fd5b50610291600480360381019061028c9190613962565b610b16565b60405161029e91906138e9565b60405180910390f35b3480156102b357600080fd5b506102ce60048036038101906102c99190613a30565b610b36565b005b3480156102dc57600080fd5b506102f760048036038101906102f29190613dbd565b610d1a565b005b34801561030557600080fd5b5061030e610ee6565b60405161031b9190613e3b565b60405180910390f35b61033e60048036038101906103399190613e56565b610f0c565b005b34801561034c57600080fd5b50610355610f2b565b6040516103629190613ecb565b60405180910390f35b34801561037757600080fd5b50610380610f5e565b60405161038d9190613ef5565b60405180910390f35b3480156103a257600080fd5b506103bd60048036038101906103b89190613a30565b610f67565b6040516103d09796959493929190613f69565b60405180910390f35b3480156103e557600080fd5b506103ee611074565b6040516103fb9190613e3b565b60405180910390f35b34801561041057600080fd5b5061042b60048036038101906104269190613962565b61109a565b6040516104389190613ef5565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190613962565b6110b2565b005b34801561047657600080fd5b5061047f611115565b005b34801561048d57600080fd5b50610496611129565b6040516104a39190613e3b565b60405180910390f35b3480156104b857600080fd5b506104d360048036038101906104ce91906140a7565b611161565b005b3480156104e157600080fd5b506104fc60048036038101906104f79190613a30565b611471565b6040516105099190613ef5565b60405180910390f35b34801561051e57600080fd5b506105396004803603810190610534919061416c565b61149f565b6040516105469190613ef5565b60405180910390f35b34801561055b57600080fd5b50610564611690565b60405161057191906141c8565b60405180910390f35b34801561058657600080fd5b5061058f6116c9565b60405161059c9190614249565b60405180910390f35b3480156105b157600080fd5b506105cc60048036038101906105c79190614264565b6116ed565b005b3480156105da57600080fd5b506105f560048036038101906105f09190613962565b611902565b005b34801561060357600080fd5b5061061e60048036038101906106199190613962565b61194d565b60405161062b9190613ef5565b60405180910390f35b34801561064057600080fd5b5061065b600480360381019061065691906142dc565b611965565b005b34801561066957600080fd5b50610684600480360381019061067f9190614338565b611bdf565b005b34801561069257600080fd5b506106ad60048036038101906106a89190613962565b611ecb565b005b3480156106bb57600080fd5b506106c4611f51565b6040516106d19190614412565b60405180910390f35b3480156106e657600080fd5b5061070160048036038101906106fc919061442d565b611f77565b005b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b61074161226c565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6107a46135f7565b60006005836040516107b691906144d0565b9081526020016040518091039020604051806101000160405290816000820180546107e090614516565b80601f016020809104026020016040519081016040528092919081815260200182805461080c90614516565b80156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108e757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161089d575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16600381111561099357610992613bcf565b5b60038111156109a5576109a4613bcf565b5b81525050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b209463856040518263ffffffff1660e01b8152600401610a0791906141c8565b600060405180830381865afa158015610a24573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a4d91906146b7565b905060405180610140016040528085815260200183602001518152602001836040015173ffffffffffffffffffffffffffffffffffffffff16815260200183606001518152602001600986604051610aa591906144d0565b9081526020016040518091039020548152602001836080015181526020018360a0015181526020018360c0015181526020018360e001516003811115610aee57610aed613bcf565b5b815260200182604001516002811115610b0a57610b09613bcf565b5b81525092505050919050565b60046020528060005260406000206000915054906101000a900460ff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb990614772565b60405180910390fd5b60016003811115610bd657610bd5613bcf565b5b600582604051610be691906144d0565b908152602001604051809103902060070160009054906101000a900460ff166003811115610c1757610c16613bcf565b5b14610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e906147de565b60405180910390fd5b6002600582604051610c6991906144d0565b908152602001604051809103902060070160006101000a81548160ff02191690836003811115610c9c57610c9b613bcf565b5b02179055506000600582604051610cb391906144d0565b9081526020016040518091039020600301541115610cd557610cd4816122f3565b5b80604051610ce391906144d0565b60405180910390207f2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf87588060405160405180910390a250565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90614772565b60405180910390fd5b60016003811115610dba57610db9613bcf565b5b600584604051610dca91906144d0565b908152602001604051809103902060070160009054906101000a900460ff166003811115610dfb57610dfa613bcf565b5b03610ee15781600584604051610e1191906144d0565b90815260200160405180910390206006016000828254610e31919061482d565b9250508190555080600584604051610e4991906144d0565b90815260200160405180910390206003016000828254610e69919061482d565b9250508190555082604051610e7e91906144d0565b60405180910390207fd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c83600586604051610eb891906144d0565b908152602001604051809103902060060154604051610ed8929190614861565b60405180910390a25b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f1461278e565b610f1d82612874565b610f27828261287f565b5050565b6000610f3561299e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006002905090565b600581805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610fa090614516565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcc90614516565b80156110195780601f10610fee57610100808354040283529160200191611019565b820191906000526020600020905b815481529060010190602001808311610ffc57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905087565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b6110ba61226c565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61111d61226c565b6111276000612a25565b565b600080611134612afc565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e490614772565b60405180910390fd5b6000600381111561120157611200613bcf565b5b60058760405161121191906144d0565b908152602001604051809103902060070160009054906101000a900460ff16600381111561124257611241613bcf565b5b14611282576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611279906148d6565b60405180910390fd5b6040518061010001604052808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200161271061251c866112c791906148f6565b6112d19190614967565b815260200142815260200160008152602001828152602001600160038111156112fd576112fc613bcf565b5b81525060058760405161131091906144d0565b908152602001604051809103902060008201518160000190816113339190614b3a565b506020820151816001019080519060200190611350929190613684565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360038111156113eb576113ea613bcf565b5b02179055509050508160098760405161140491906144d0565b9081526020016040518091039020819055508560405161142491906144d0565b60405180910390207f1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951868686856040516114619493929190614c7b565b60405180910390a2505050505050565b6009818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000806005846040516114b291906144d0565b908152602001604051809103902090506000805b826001018054905081101561155a578473ffffffffffffffffffffffffffffffffffffffff1683600101828154811061150257611501614cc7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361154d57600191505b80806001019150506114c6565b508061156b5760009250505061168a565b6002600381111561157f5761157e613bcf565b5b8260070160009054906101000a900460ff1660038111156115a3576115a2613bcf565b5b036115c857816001018054905082600301546115bf9190614967565b9250505061168a565b6003808111156115db576115da613bcf565b5b8260070160009054906101000a900460ff1660038111156115ff576115fe613bcf565b5b036116835760008260040154836005015461161a9190614cf6565b905082600601548110611648578260010180549050836003015461163e9190614967565b935050505061168a565b8260010180549050836006015482856003015461166591906148f6565b61166f9190614967565b6116799190614967565b935050505061168a565b6000925050505b92915050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177090614772565b60405180910390fd5b6001600381111561178d5761178c613bcf565b5b60058360405161179d91906144d0565b908152602001604051809103902060070160009054906101000a900460ff1660038111156117ce576117cd613bcf565b5b1461180e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611805906147de565b60405180910390fd5b600260058360405161182091906144d0565b908152602001604051809103902060070160006101000a81548160ff0219169083600381111561185357611852613bcf565b5b02179055508160405161186691906144d0565b60405180910390207f2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf87588060405160405180910390a260006005836040516118ac91906144d0565b908152602001604051809103902090506000816003015411156118fd5760008160010180549050835183600301546118e491906148f6565b6118ee9190614967565b90506118fb848483612b24565b505b505050565b61190a61226c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60066020528060005260406000206000915090505481565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166119f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e890614772565b60405180910390fd5b60016003811115611a0557611a04613bcf565b5b600583604051611a1591906144d0565b908152602001604051809103902060070160009054906101000a900460ff166003811115611a4657611a45613bcf565b5b14611a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7d906147de565b60405180910390fd5b600582604051611a9691906144d0565b908152602001604051809103902060040154811015611aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae190614d9c565b60405180910390fd5b6003600583604051611afc91906144d0565b908152602001604051809103902060070160006101000a81548160ff02191690836003811115611b2f57611b2e613bcf565b5b021790555080600583604051611b4591906144d0565b9081526020016040518091039020600501819055506000600583604051611b6c91906144d0565b9081526020016040518091039020600301541115611b8e57611b8d826122f3565b5b81604051611b9c91906144d0565b60405180910390207f58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a3682604051611bd39190613ef5565b60405180910390a25050565b60046000611c246040518060400160405280600b81526020017f636c61696d526566756e64000000000000000000000000000000000000000000815250868686612d31565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca290614e08565b60405180910390fd5b6000600584604051611cbd91906144d0565b908152602001604051809103902090503373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5690614e74565b60405180910390fd5b6001600783604051611d719190614edb565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600081600101805490508260030154611daf9190614967565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401611e3293929190614ef2565b6020604051808303816000875af1158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e759190614f55565b503373ffffffffffffffffffffffffffffffffffffffff167f358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae982604051611ebc9190613ef5565b60405180910390a25050505050565b611ed361226c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611f455760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611f3c9190613e3b565b60405180910390fd5b611f4e81612a25565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611f81612d8d565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015611fcf5750825b9050600060018367ffffffffffffffff16148015612004575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015612012575080155b15612049576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156120995760018560000160086101000a81548160ff0219169083151502179055505b6120a233612db5565b6120aa612dc9565b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083156122615760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516122589190614fd1565b60405180910390a15b505050505050505050565b612274612dd3565b73ffffffffffffffffffffffffffffffffffffffff16612292611129565b73ffffffffffffffffffffffffffffffffffffffff16146122f1576122b5612dd3565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016122e89190613e3b565b60405180910390fd5b565b600060058260405161230591906144d0565b908152602001604051809103902090506002600381111561232957612328613bcf565b5b8160070160009054906101000a900460ff16600381111561234d5761234c613bcf565b5b036123ee576123e982826001018054806020026020016040519081016040528092919081815260200182805480156123da57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612390575b50505050508360030154612b24565b61278a565b60038081111561240157612400613bcf565b5b8160070160009054906101000a900460ff16600381111561242557612424613bcf565b5b0361274e576000816004015482600501546124409190614cf6565b9050816006015481106124f057816006015490506124eb83836001018054806020026020016040519081016040528092919081815260200182805480156124dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612492575b50505050508460030154612b24565b612748565b6000826006015482846003015461250791906148f6565b6125119190614967565b90506125a6848460010180548060200260200160405190810160405280929190818152602001828054801561259b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612551575b505050505083612b24565b60006127106113888386600301546125be9190614cf6565b6125c891906148f6565b6125d29190614967565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161267993929190614ef2565b6020604051808303816000875af1158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190614f55565b508360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161270691906144d0565b60405180910390207fcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf88360405161273d9190613ef5565b60405180910390a350505b50612789565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127809061505e565b60405180910390fd5b5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061283b57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612822612ddb565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612872576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61287c61226c565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128e757506040513d601f19601f820116820180604052508101906128e491906150aa565b60015b61292857816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161291f9190613e3b565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461298f57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016129869190613ecb565b60405180910390fd5b6129998383612e32565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612a23576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612a2f612afc565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b612b2d81612ea5565b6000825182612b3c9190614967565b905060005b8351811015612d2a576000848281518110612b5f57612b5e614cc7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd591906150d7565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683866040518463ffffffff1660e01b8152600401612c5893929190614ef2565b6020604051808303816000875af1158015612c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9b9190614f55565b50848281518110612caf57612cae614cc7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686604051612cdb91906144d0565b60405180910390207f6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d28386604051612d14929190615104565b60405180910390a3508080600101915050612b41565b5050505050565b600080858585604051602001612d499392919061512d565b6040516020818303038152906040528051906020012090506000612d6c82612f8f565b9050612d818482612fc590919063ffffffff16565b92505050949350505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612dbd612ff1565b612dc681613031565b50565b612dd1612ff1565b565b600033905090565b6000612e097f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6130b7565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612e3b826130c1565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612e9857612e92828261318e565b50612ea1565b612ea0613212565b5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401612f4893929190614ef2565b6020604051808303816000875af1158015612f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b9190614f55565b5050565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600080600080612fd5868661324f565b925092509250612fe582826132ab565b82935050505092915050565b612ff961340f565b61302f576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613039612ff1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036130ab5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016130a29190613e3b565b60405180910390fd5b6130b481612a25565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b0361311d57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016131149190613e3b565b60405180910390fd5b8061314a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6130b7565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516131b89190614edb565b600060405180830381855af49150503d80600081146131f3576040519150601f19603f3d011682016040523d82523d6000602084013e6131f8565b606091505b509150915061320885838361342f565b9250505092915050565b600034111561324d576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600080600060418451036132945760008060006020870151925060408701519150606087015160001a9050613286888285856134be565b9550955095505050506132a4565b60006002855160001b9250925092505b9250925092565b600060038111156132bf576132be613bcf565b5b8260038111156132d2576132d1613bcf565b5b031561340b57600160038111156132ec576132eb613bcf565b5b8260038111156132ff576132fe613bcf565b5b03613336576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561334a57613349613bcf565b5b82600381111561335d5761335c613bcf565b5b036133a2578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016133999190613ef5565b60405180910390fd5b6003808111156133b5576133b4613bcf565b5b8260038111156133c8576133c7613bcf565b5b0361340a57806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016134019190613ecb565b60405180910390fd5b5b5050565b6000613419612d8d565b60000160089054906101000a900460ff16905090565b6060826134445761343f826135b2565b6134b6565b6000825114801561346c575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156134ae57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016134a59190613e3b565b60405180910390fd5b8190506134b7565b5b9392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156134fe5760006003859250925092506135a8565b600060018888888860405160008152602001604052604051613523949392919061517a565b6020604051602081039080840390855afa158015613545573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361359957600060016000801b935093509350506135a8565b8060008060001b935093509350505b9450945094915050565b6000815111156135c55780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061014001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000600381111561366557613664613bcf565b5b81526020016000600281111561367e5761367d613bcf565b5b81525090565b8280548282559060005260206000209081019282156136fd579160200282015b828111156136fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906136a4565b5b50905061370a919061370e565b5090565b5b8082111561372757600081600090555060010161370f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61379282613749565b810181811067ffffffffffffffff821117156137b1576137b061375a565b5b80604052505050565b60006137c461372b565b90506137d08282613789565b919050565b600067ffffffffffffffff8211156137f0576137ef61375a565b5b6137f982613749565b9050602081019050919050565b82818337600083830152505050565b6000613828613823846137d5565b6137ba565b90508281526020810184848401111561384457613843613744565b5b61384f848285613806565b509392505050565b600082601f83011261386c5761386b61373f565b5b813561387c848260208601613815565b91505092915050565b60006020828403121561389b5761389a613735565b5b600082013567ffffffffffffffff8111156138b9576138b861373a565b5b6138c584828501613857565b91505092915050565b60008115159050919050565b6138e3816138ce565b82525050565b60006020820190506138fe60008301846138da565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061392f82613904565b9050919050565b61393f81613924565b811461394a57600080fd5b50565b60008135905061395c81613936565b92915050565b60006020828403121561397857613977613735565b5b60006139868482850161394d565b91505092915050565b600067ffffffffffffffff8211156139aa576139a961375a565b5b6139b382613749565b9050602081019050919050565b60006139d36139ce8461398f565b6137ba565b9050828152602081018484840111156139ef576139ee613744565b5b6139fa848285613806565b509392505050565b600082601f830112613a1757613a1661373f565b5b8135613a278482602086016139c0565b91505092915050565b600060208284031215613a4657613a45613735565b5b600082013567ffffffffffffffff811115613a6457613a6361373a565b5b613a7084828501613a02565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ab3578082015181840152602081019050613a98565b60008484015250505050565b6000613aca82613a79565b613ad48185613a84565b9350613ae4818560208601613a95565b613aed81613749565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b2d81613924565b82525050565b6000613b3f8383613b24565b60208301905092915050565b6000602082019050919050565b6000613b6382613af8565b613b6d8185613b03565b9350613b7883613b14565b8060005b83811015613ba9578151613b908882613b33565b9750613b9b83613b4b565b925050600181019050613b7c565b5085935050505092915050565b6000819050919050565b613bc981613bb6565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613c0f57613c0e613bcf565b5b50565b6000819050613c2082613bfe565b919050565b6000613c3082613c12565b9050919050565b613c4081613c25565b82525050565b60038110613c5757613c56613bcf565b5b50565b6000819050613c6882613c46565b919050565b6000613c7882613c5a565b9050919050565b613c8881613c6d565b82525050565b6000610140830160008301518482036000860152613cac8282613abf565b91505060208301518482036020860152613cc68282613b58565b9150506040830151613cdb6040860182613b24565b506060830151613cee6060860182613bc0565b506080830151613d016080860182613bc0565b5060a0830151613d1460a0860182613bc0565b5060c0830151613d2760c0860182613bc0565b5060e0830151613d3a60e0860182613bc0565b50610100830151613d4f610100860182613c37565b50610120830151613d64610120860182613c7f565b508091505092915050565b60006020820190508181036000830152613d898184613c8e565b905092915050565b613d9a81613bb6565b8114613da557600080fd5b50565b600081359050613db781613d91565b92915050565b600080600060608486031215613dd657613dd5613735565b5b600084013567ffffffffffffffff811115613df457613df361373a565b5b613e0086828701613a02565b9350506020613e1186828701613da8565b9250506040613e2286828701613da8565b9150509250925092565b613e3581613924565b82525050565b6000602082019050613e506000830184613e2c565b92915050565b60008060408385031215613e6d57613e6c613735565b5b6000613e7b8582860161394d565b925050602083013567ffffffffffffffff811115613e9c57613e9b61373a565b5b613ea885828601613857565b9150509250929050565b6000819050919050565b613ec581613eb2565b82525050565b6000602082019050613ee06000830184613ebc565b92915050565b613eef81613bb6565b82525050565b6000602082019050613f0a6000830184613ee6565b92915050565b600082825260208201905092915050565b6000613f2c82613a79565b613f368185613f10565b9350613f46818560208601613a95565b613f4f81613749565b840191505092915050565b613f6381613c25565b82525050565b600060e0820190508181036000830152613f83818a613f21565b9050613f926020830189613e2c565b613f9f6040830188613ee6565b613fac6060830187613ee6565b613fb96080830186613ee6565b613fc660a0830185613ee6565b613fd360c0830184613f5a565b98975050505050505050565b600067ffffffffffffffff821115613ffa57613ff961375a565b5b602082029050602081019050919050565b600080fd5b600061402361401e84613fdf565b6137ba565b905080838252602082019050602084028301858111156140465761404561400b565b5b835b8181101561406f578061405b888261394d565b845260208401935050602081019050614048565b5050509392505050565b600082601f83011261408e5761408d61373f565b5b813561409e848260208601614010565b91505092915050565b60008060008060008060c087890312156140c4576140c3613735565b5b600087013567ffffffffffffffff8111156140e2576140e161373a565b5b6140ee89828a01613a02565b965050602087013567ffffffffffffffff81111561410f5761410e61373a565b5b61411b89828a01614079565b955050604061412c89828a0161394d565b945050606061413d89828a01613da8565b935050608061414e89828a01613da8565b92505060a061415f89828a01613da8565b9150509295509295509295565b6000806040838503121561418357614182613735565b5b600083013567ffffffffffffffff8111156141a1576141a061373a565b5b6141ad85828601613a02565b92505060206141be8582860161394d565b9150509250929050565b600060208201905081810360008301526141e28184613f21565b905092915050565b6000819050919050565b600061420f61420a61420584613904565b6141ea565b613904565b9050919050565b6000614221826141f4565b9050919050565b600061423382614216565b9050919050565b61424381614228565b82525050565b600060208201905061425e600083018461423a565b92915050565b6000806040838503121561427b5761427a613735565b5b600083013567ffffffffffffffff8111156142995761429861373a565b5b6142a585828601613a02565b925050602083013567ffffffffffffffff8111156142c6576142c561373a565b5b6142d285828601614079565b9150509250929050565b600080604083850312156142f3576142f2613735565b5b600083013567ffffffffffffffff8111156143115761431061373a565b5b61431d85828601613a02565b925050602061432e85828601613da8565b9150509250929050565b60008060006060848603121561435157614350613735565b5b600084013567ffffffffffffffff81111561436f5761436e61373a565b5b61437b86828701613a02565b935050602084013567ffffffffffffffff81111561439c5761439b61373a565b5b6143a886828701613a02565b925050604084013567ffffffffffffffff8111156143c9576143c861373a565b5b6143d586828701613857565b9150509250925092565b60006143ea826141f4565b9050919050565b60006143fc826143df565b9050919050565b61440c816143f1565b82525050565b60006020820190506144276000830184614403565b92915050565b6000806000806080858703121561444757614446613735565b5b60006144558782880161394d565b94505060206144668782880161394d565b93505060406144778782880161394d565b92505060606144888782880161394d565b91505092959194509250565b600081905092915050565b60006144aa82613a79565b6144b48185614494565b93506144c4818560208601613a95565b80840191505092915050565b60006144dc828461449f565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061452e57607f821691505b602082108103614541576145406144e7565b5b50919050565b600080fd5b600080fd5b60008151905061456081613936565b92915050565b600061457961457484613fdf565b6137ba565b9050808382526020820190506020840283018581111561459c5761459b61400b565b5b835b818110156145c557806145b18882614551565b84526020840193505060208101905061459e565b5050509392505050565b600082601f8301126145e4576145e361373f565b5b81516145f4848260208601614566565b91505092915050565b60008151905061460c81613d91565b92915050565b6003811061461f57600080fd5b50565b60008151905061463181614612565b92915050565b60006060828403121561464d5761464c614547565b5b61465760606137ba565b9050600082015167ffffffffffffffff8111156146775761467661454c565b5b614683848285016145cf565b6000830152506020614697848285016145fd565b60208301525060406146ab84828501614622565b60408301525092915050565b6000602082840312156146cd576146cc613735565b5b600082015167ffffffffffffffff8111156146eb576146ea61373a565b5b6146f784828501614637565b91505092915050565b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b600061475c602683613f10565b915061476782614700565b604082019050919050565b6000602082019050818103600083015261478b8161474f565b9050919050565b7f7461736b206973206e6f7420696e2070726f6772657373000000000000000000600082015250565b60006147c8601783613f10565b91506147d382614792565b602082019050919050565b600060208201905081810360008301526147f7816147bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061483882613bb6565b915061484383613bb6565b925082820190508082111561485b5761485a6147fe565b5b92915050565b60006040820190506148766000830185613ee6565b6148836020830184613ee6565b9392505050565b7f7461736b55696420616c72656164792061737369676e65640000000000000000600082015250565b60006148c0601883613f10565b91506148cb8261488a565b602082019050919050565b600060208201905081810360008301526148ef816148b3565b9050919050565b600061490182613bb6565b915061490c83613bb6565b925082820261491a81613bb6565b91508282048414831517614931576149306147fe565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061497282613bb6565b915061497d83613bb6565b92508261498d5761498c614938565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026149fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826149bd565b614a0486836149bd565b95508019841693508086168417925050509392505050565b6000614a37614a32614a2d84613bb6565b6141ea565b613bb6565b9050919050565b6000819050919050565b614a5183614a1c565b614a65614a5d82614a3e565b8484546149ca565b825550505050565b600090565b614a7a614a6d565b614a85818484614a48565b505050565b5b81811015614aa957614a9e600082614a72565b600181019050614a8b565b5050565b601f821115614aee57614abf81614998565b614ac8846149ad565b81016020851015614ad7578190505b614aeb614ae3856149ad565b830182614a8a565b50505b505050565b600082821c905092915050565b6000614b1160001984600802614af3565b1980831691505092915050565b6000614b2a8383614b00565b9150826002028217905092915050565b614b4382613a79565b67ffffffffffffffff811115614b5c57614b5b61375a565b5b614b668254614516565b614b71828285614aad565b600060209050601f831160018114614ba45760008415614b92578287015190505b614b9c8582614b1e565b865550614c04565b601f198416614bb286614998565b60005b82811015614bda57848901518255600182019150602085019450602081019050614bb5565b86831015614bf75784890151614bf3601f891682614b00565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000614c2882613af8565b614c328185614c0c565b9350614c3d83613b14565b8060005b83811015614c6e578151614c558882613b33565b9750614c6083613b4b565b925050600181019050614c41565b5085935050505092915050565b60006080820190508181036000830152614c958187614c1d565b9050614ca46020830186613e2c565b614cb16040830185613ee6565b614cbe6060830184613ee6565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614d0182613bb6565b9150614d0c83613bb6565b9250828203905081811115614d2457614d236147fe565b5b92915050565b7f7465726d696e6174652074696d65206d7573742062652061667465722073746160008201527f72742074696d6500000000000000000000000000000000000000000000000000602082015250565b6000614d86602783613f10565b9150614d9182614d2a565b604082019050919050565b60006020820190508181036000830152614db581614d79565b9050919050565b7f7369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b6000614df2601d83613f10565b9150614dfd82614dbc565b602082019050919050565b60006020820190508181036000830152614e2181614de5565b9050919050565b7f73656e646572206973206e6f7420746865207573657200000000000000000000600082015250565b6000614e5e601683613f10565b9150614e6982614e28565b602082019050919050565b60006020820190508181036000830152614e8d81614e51565b9050919050565b600081519050919050565b600081905092915050565b6000614eb582614e94565b614ebf8185614e9f565b9350614ecf818560208601613a95565b80840191505092915050565b6000614ee78284614eaa565b915081905092915050565b6000606082019050614f076000830186613e2c565b614f146020830185613e2c565b614f216040830184613ee6565b949350505050565b614f32816138ce565b8114614f3d57600080fd5b50565b600081519050614f4f81614f29565b92915050565b600060208284031215614f6b57614f6a613735565b5b6000614f7984828501614f40565b91505092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000614fbb614fb6614fb184614f82565b6141ea565b614f8c565b9050919050565b614fcb81614fa0565b82525050565b6000602082019050614fe66000830184614fc2565b92915050565b7f7461736b206973206e6f7420636f6d706c65746564206e6f72207465726d696e60008201527f6174656400000000000000000000000000000000000000000000000000000000602082015250565b6000615048602483613f10565b915061505382614fec565b604082019050919050565b600060208201905081810360008301526150778161503b565b9050919050565b61508781613eb2565b811461509257600080fd5b50565b6000815190506150a48161507e565b92915050565b6000602082840312156150c0576150bf613735565b5b60006150ce84828501615095565b91505092915050565b6000602082840312156150ed576150ec613735565b5b60006150fb84828501614551565b91505092915050565b60006040820190506151196000830185613e2c565b6151266020830184613ee6565b9392505050565b6000615139828661449f565b9150615145828561449f565b9150615151828461449f565b9150819050949350505050565b600060ff82169050919050565b6151748161515e565b82525050565b600060808201905061518f6000830187613ebc565b61519c602083018661516b565b6151a96040830185613ebc565b6151b66060830184613ebc565b9594505050505056fea26469706673582212203c4d9188ccff137ec2764e038f73ee9e05c69f5d10a09879609b08ec6a7a7ee964736f6c63430008190033",
}

// FcpTaskManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use FcpTaskManagerMetaData.ABI instead.
var FcpTaskManagerABI = FcpTaskManagerMetaData.ABI

// FcpTaskManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FcpTaskManagerMetaData.Bin instead.
var FcpTaskManagerBin = FcpTaskManagerMetaData.Bin

// DeployFcpTaskManager deploys a new Ethereum contract, binding an instance of FcpTaskManager to it.
func DeployFcpTaskManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FcpTaskManager, error) {
	parsed, err := FcpTaskManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FcpTaskManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FcpTaskManager{FcpTaskManagerCaller: FcpTaskManagerCaller{contract: contract}, FcpTaskManagerTransactor: FcpTaskManagerTransactor{contract: contract}, FcpTaskManagerFilterer: FcpTaskManagerFilterer{contract: contract}}, nil
}

// FcpTaskManager is an auto generated Go binding around an Ethereum contract.
type FcpTaskManager struct {
	FcpTaskManagerCaller     // Read-only binding to the contract
	FcpTaskManagerTransactor // Write-only binding to the contract
	FcpTaskManagerFilterer   // Log filterer for contract events
}

// FcpTaskManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type FcpTaskManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FcpTaskManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FcpTaskManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FcpTaskManagerSession struct {
	Contract     *FcpTaskManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FcpTaskManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FcpTaskManagerCallerSession struct {
	Contract *FcpTaskManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// FcpTaskManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FcpTaskManagerTransactorSession struct {
	Contract     *FcpTaskManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// FcpTaskManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type FcpTaskManagerRaw struct {
	Contract *FcpTaskManager // Generic contract binding to access the raw methods on
}

// FcpTaskManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FcpTaskManagerCallerRaw struct {
	Contract *FcpTaskManagerCaller // Generic read-only contract binding to access the raw methods on
}

// FcpTaskManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FcpTaskManagerTransactorRaw struct {
	Contract *FcpTaskManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFcpTaskManager creates a new instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManager(address common.Address, backend bind.ContractBackend) (*FcpTaskManager, error) {
	contract, err := bindFcpTaskManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManager{FcpTaskManagerCaller: FcpTaskManagerCaller{contract: contract}, FcpTaskManagerTransactor: FcpTaskManagerTransactor{contract: contract}, FcpTaskManagerFilterer: FcpTaskManagerFilterer{contract: contract}}, nil
}

// NewFcpTaskManagerCaller creates a new read-only instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerCaller(address common.Address, caller bind.ContractCaller) (*FcpTaskManagerCaller, error) {
	contract, err := bindFcpTaskManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerCaller{contract: contract}, nil
}

// NewFcpTaskManagerTransactor creates a new write-only instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*FcpTaskManagerTransactor, error) {
	contract, err := bindFcpTaskManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTransactor{contract: contract}, nil
}

// NewFcpTaskManagerFilterer creates a new log filterer instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*FcpTaskManagerFilterer, error) {
	contract, err := bindFcpTaskManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerFilterer{contract: contract}, nil
}

// bindFcpTaskManager binds a generic wrapper to an already deployed contract.
func bindFcpTaskManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FcpTaskManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FcpTaskManager *FcpTaskManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FcpTaskManager.Contract.FcpTaskManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FcpTaskManager *FcpTaskManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.FcpTaskManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FcpTaskManager *FcpTaskManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.FcpTaskManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FcpTaskManager *FcpTaskManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FcpTaskManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FcpTaskManager *FcpTaskManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FcpTaskManager *FcpTaskManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FcpTaskManager *FcpTaskManagerCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FcpTaskManager *FcpTaskManagerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _FcpTaskManager.Contract.UPGRADEINTERFACEVERSION(&_FcpTaskManager.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FcpTaskManager *FcpTaskManagerCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _FcpTaskManager.Contract.UPGRADEINTERFACEVERSION(&_FcpTaskManager.CallOpts)
}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) ApWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "apWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) ApWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ApWallet(&_FcpTaskManager.CallOpts)
}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ApWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ApWallet(&_FcpTaskManager.CallOpts)
}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) ArWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "arWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) ArWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ArWallet(&_FcpTaskManager.CallOpts)
}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ArWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ArWallet(&_FcpTaskManager.CallOpts)
}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) ClaimableRefund(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "claimableRefund", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) ClaimableRefund(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableRefund(&_FcpTaskManager.CallOpts, arg0)
}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ClaimableRefund(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableRefund(&_FcpTaskManager.CallOpts, arg0)
}

// ClaimableReward is a free data retrieval call binding the contract method 0xe9503425.
//
// Solidity: function claimableReward(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) ClaimableReward(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "claimableReward", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimableReward is a free data retrieval call binding the contract method 0xe9503425.
//
// Solidity: function claimableReward(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) ClaimableReward(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableReward(&_FcpTaskManager.CallOpts, arg0)
}

// ClaimableReward is a free data retrieval call binding the contract method 0xe9503425.
//
// Solidity: function claimableReward(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ClaimableReward(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableReward(&_FcpTaskManager.CallOpts, arg0)
}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) CollateralContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "collateralContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) CollateralContract() (common.Address, error) {
	return _FcpTaskManager.Contract.CollateralContract(&_FcpTaskManager.CallOpts)
}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) CollateralContract() (common.Address, error) {
	return _FcpTaskManager.Contract.CollateralContract(&_FcpTaskManager.CallOpts)
}

// CollateralValue is a free data retrieval call binding the contract method 0xa718a952.
//
// Solidity: function collateralValue(string ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) CollateralValue(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "collateralValue", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CollateralValue is a free data retrieval call binding the contract method 0xa718a952.
//
// Solidity: function collateralValue(string ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) CollateralValue(arg0 string) (*big.Int, error) {
	return _FcpTaskManager.Contract.CollateralValue(&_FcpTaskManager.CallOpts, arg0)
}

// CollateralValue is a free data retrieval call binding the contract method 0xa718a952.
//
// Solidity: function collateralValue(string ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) CollateralValue(arg0 string) (*big.Int, error) {
	return _FcpTaskManager.Contract.CollateralValue(&_FcpTaskManager.CallOpts, arg0)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerCaller) GetTaskInfo(opts *bind.CallOpts, taskUid string) (TaskManagerFullTaskInfo, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "getTaskInfo", taskUid)

	if err != nil {
		return *new(TaskManagerFullTaskInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(TaskManagerFullTaskInfo)).(*TaskManagerFullTaskInfo)

	return out0, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerSession) GetTaskInfo(taskUid string) (TaskManagerFullTaskInfo, error) {
	return _FcpTaskManager.Contract.GetTaskInfo(&_FcpTaskManager.CallOpts, taskUid)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerCallerSession) GetTaskInfo(taskUid string) (TaskManagerFullTaskInfo, error) {
	return _FcpTaskManager.Contract.GetTaskInfo(&_FcpTaskManager.CallOpts, taskUid)
}

// GetTaskReward is a free data retrieval call binding the contract method 0xa9478988.
//
// Solidity: function getTaskReward(string taskUid, address cpAccount) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) GetTaskReward(opts *bind.CallOpts, taskUid string, cpAccount common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "getTaskReward", taskUid, cpAccount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTaskReward is a free data retrieval call binding the contract method 0xa9478988.
//
// Solidity: function getTaskReward(string taskUid, address cpAccount) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) GetTaskReward(taskUid string, cpAccount common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.GetTaskReward(&_FcpTaskManager.CallOpts, taskUid, cpAccount)
}

// GetTaskReward is a free data retrieval call binding the contract method 0xa9478988.
//
// Solidity: function getTaskReward(string taskUid, address cpAccount) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) GetTaskReward(taskUid string, cpAccount common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.GetTaskReward(&_FcpTaskManager.CallOpts, taskUid, cpAccount)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _FcpTaskManager.Contract.IsAdmin(&_FcpTaskManager.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _FcpTaskManager.Contract.IsAdmin(&_FcpTaskManager.CallOpts, arg0)
}

// IsSignatureUsed is a free data retrieval call binding the contract method 0x1150f0f3.
//
// Solidity: function isSignatureUsed(bytes ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCaller) IsSignatureUsed(opts *bind.CallOpts, arg0 []byte) (bool, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "isSignatureUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSignatureUsed is a free data retrieval call binding the contract method 0x1150f0f3.
//
// Solidity: function isSignatureUsed(bytes ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerSession) IsSignatureUsed(arg0 []byte) (bool, error) {
	return _FcpTaskManager.Contract.IsSignatureUsed(&_FcpTaskManager.CallOpts, arg0)
}

// IsSignatureUsed is a free data retrieval call binding the contract method 0x1150f0f3.
//
// Solidity: function isSignatureUsed(bytes ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCallerSession) IsSignatureUsed(arg0 []byte) (bool, error) {
	return _FcpTaskManager.Contract.IsSignatureUsed(&_FcpTaskManager.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) Owner() (common.Address, error) {
	return _FcpTaskManager.Contract.Owner(&_FcpTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Owner() (common.Address, error) {
	return _FcpTaskManager.Contract.Owner(&_FcpTaskManager.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerSession) ProxiableUUID() ([32]byte, error) {
	return _FcpTaskManager.Contract.ProxiableUUID(&_FcpTaskManager.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ProxiableUUID() ([32]byte, error) {
	return _FcpTaskManager.Contract.ProxiableUUID(&_FcpTaskManager.CallOpts)
}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) RewardToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "rewardToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) RewardToken() (common.Address, error) {
	return _FcpTaskManager.Contract.RewardToken(&_FcpTaskManager.CallOpts)
}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) RewardToken() (common.Address, error) {
	return _FcpTaskManager.Contract.RewardToken(&_FcpTaskManager.CallOpts)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerCaller) Tasks(opts *bind.CallOpts, arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "tasks", arg0)

	outstruct := new(struct {
		TaskUid            string
		User               common.Address
		Reward             *big.Int
		StartTimestamp     *big.Int
		TerminateTimestamp *big.Int
		Duration           *big.Int
		TaskStatus         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TaskUid = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.User = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Reward = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.StartTimestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TerminateTimestamp = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.TaskStatus = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerSession) Tasks(arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	return _FcpTaskManager.Contract.Tasks(&_FcpTaskManager.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Tasks(arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	return _FcpTaskManager.Contract.Tasks(&_FcpTaskManager.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) Version() (*big.Int, error) {
	return _FcpTaskManager.Contract.Version(&_FcpTaskManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Version() (*big.Int, error) {
	return _FcpTaskManager.Contract.Version(&_FcpTaskManager.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) AddAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "addAdmin", newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AddAdmin(&_FcpTaskManager.TransactOpts, newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AddAdmin(&_FcpTaskManager.TransactOpts, newAdmin)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) AssignTask(opts *bind.TransactOpts, taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "assignTask", taskUid, cpAccountList, user, reward, collateral, duration)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerSession) AssignTask(taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AssignTask(&_FcpTaskManager.TransactOpts, taskUid, cpAccountList, user, reward, collateral, duration)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) AssignTask(taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AssignTask(&_FcpTaskManager.TransactOpts, taskUid, cpAccountList, user, reward, collateral, duration)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xeef74fc7.
//
// Solidity: function claimRefund(string taskUid, string jobUid, bytes signature) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) ClaimRefund(opts *bind.TransactOpts, taskUid string, jobUid string, signature []byte) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "claimRefund", taskUid, jobUid, signature)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xeef74fc7.
//
// Solidity: function claimRefund(string taskUid, string jobUid, bytes signature) returns()
func (_FcpTaskManager *FcpTaskManagerSession) ClaimRefund(taskUid string, jobUid string, signature []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ClaimRefund(&_FcpTaskManager.TransactOpts, taskUid, jobUid, signature)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xeef74fc7.
//
// Solidity: function claimRefund(string taskUid, string jobUid, bytes signature) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) ClaimRefund(taskUid string, jobUid string, signature []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ClaimRefund(&_FcpTaskManager.TransactOpts, taskUid, jobUid, signature)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) CompleteTask(opts *bind.TransactOpts, taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "completeTask", taskUid)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerSession) CompleteTask(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask(&_FcpTaskManager.TransactOpts, taskUid)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) CompleteTask(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask(&_FcpTaskManager.TransactOpts, taskUid)
}

// CompleteTask0 is a paid mutator transaction binding the contract method 0xd038d1ea.
//
// Solidity: function completeTask(string taskUid, address[] remainingCpList) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) CompleteTask0(opts *bind.TransactOpts, taskUid string, remainingCpList []common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "completeTask0", taskUid, remainingCpList)
}

// CompleteTask0 is a paid mutator transaction binding the contract method 0xd038d1ea.
//
// Solidity: function completeTask(string taskUid, address[] remainingCpList) returns()
func (_FcpTaskManager *FcpTaskManagerSession) CompleteTask0(taskUid string, remainingCpList []common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask0(&_FcpTaskManager.TransactOpts, taskUid, remainingCpList)
}

// CompleteTask0 is a paid mutator transaction binding the contract method 0xd038d1ea.
//
// Solidity: function completeTask(string taskUid, address[] remainingCpList) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) CompleteTask0(taskUid string, remainingCpList []common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask0(&_FcpTaskManager.TransactOpts, taskUid, remainingCpList)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) ExtendTask(opts *bind.TransactOpts, taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "extendTask", taskUid, extraDuration, extraReward)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerSession) ExtendTask(taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ExtendTask(&_FcpTaskManager.TransactOpts, taskUid, extraDuration, extraReward)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) ExtendTask(taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ExtendTask(&_FcpTaskManager.TransactOpts, taskUid, extraDuration, extraReward)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) Initialize(opts *bind.TransactOpts, ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "initialize", ar, ap, collateralContractAddress, rewardTokenAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerSession) Initialize(ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.Initialize(&_FcpTaskManager.TransactOpts, ar, ap, collateralContractAddress, rewardTokenAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) Initialize(ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.Initialize(&_FcpTaskManager.TransactOpts, ar, ap, collateralContractAddress, rewardTokenAddress)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) RemoveAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "removeAdmin", admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RemoveAdmin(&_FcpTaskManager.TransactOpts, admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RemoveAdmin(&_FcpTaskManager.TransactOpts, admin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RenounceOwnership(&_FcpTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RenounceOwnership(&_FcpTaskManager.TransactOpts)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) SetCollateralContract(opts *bind.TransactOpts, newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "setCollateralContract", newCollateralContract)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerSession) SetCollateralContract(newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SetCollateralContract(&_FcpTaskManager.TransactOpts, newCollateralContract)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) SetCollateralContract(newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SetCollateralContract(&_FcpTaskManager.TransactOpts, newCollateralContract)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) TerminateTask(opts *bind.TransactOpts, taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "terminateTask", taskUid, terminateTime)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerSession) TerminateTask(taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TerminateTask(&_FcpTaskManager.TransactOpts, taskUid, terminateTime)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) TerminateTask(taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TerminateTask(&_FcpTaskManager.TransactOpts, taskUid, terminateTime)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TransferOwnership(&_FcpTaskManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TransferOwnership(&_FcpTaskManager.TransactOpts, newOwner)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeToAndCall(&_FcpTaskManager.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeToAndCall(&_FcpTaskManager.TransactOpts, newImplementation, data)
}

// FcpTaskManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FcpTaskManager contract.
type FcpTaskManagerInitializedIterator struct {
	Event *FcpTaskManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerInitialized represents a Initialized event raised by the FcpTaskManager contract.
type FcpTaskManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*FcpTaskManagerInitializedIterator, error) {

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerInitializedIterator{contract: _FcpTaskManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerInitialized)
				if err := _FcpTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseInitialized(log types.Log) (*FcpTaskManagerInitialized, error) {
	event := new(FcpTaskManagerInitialized)
	if err := _FcpTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FcpTaskManager contract.
type FcpTaskManagerOwnershipTransferredIterator struct {
	Event *FcpTaskManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerOwnershipTransferred represents a OwnershipTransferred event raised by the FcpTaskManager contract.
type FcpTaskManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FcpTaskManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerOwnershipTransferredIterator{contract: _FcpTaskManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerOwnershipTransferred)
				if err := _FcpTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseOwnershipTransferred(log types.Log) (*FcpTaskManagerOwnershipTransferred, error) {
	event := new(FcpTaskManagerOwnershipTransferred)
	if err := _FcpTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRefundClaimedIterator is returned from FilterRefundClaimed and is used to iterate over the raw logs and unpacked data for RefundClaimed events raised by the FcpTaskManager contract.
type FcpTaskManagerRefundClaimedIterator struct {
	Event *FcpTaskManagerRefundClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRefundClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRefundClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRefundClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRefundClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRefundClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRefundClaimed represents a RefundClaimed event raised by the FcpTaskManager contract.
type FcpTaskManagerRefundClaimed struct {
	User         common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundClaimed is a free log retrieval operation binding the contract event 0x358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9.
//
// Solidity: event RefundClaimed(address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRefundClaimed(opts *bind.FilterOpts, user []common.Address) (*FcpTaskManagerRefundClaimedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RefundClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRefundClaimedIterator{contract: _FcpTaskManager.contract, event: "RefundClaimed", logs: logs, sub: sub}, nil
}

// WatchRefundClaimed is a free log subscription operation binding the contract event 0x358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9.
//
// Solidity: event RefundClaimed(address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRefundClaimed(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRefundClaimed, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RefundClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRefundClaimed)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RefundClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundClaimed is a log parse operation binding the contract event 0x358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9.
//
// Solidity: event RefundClaimed(address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRefundClaimed(log types.Log) (*FcpTaskManagerRefundClaimed, error) {
	event := new(FcpTaskManagerRefundClaimed)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RefundClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRefundReleasedIterator is returned from FilterRefundReleased and is used to iterate over the raw logs and unpacked data for RefundReleased events raised by the FcpTaskManager contract.
type FcpTaskManagerRefundReleasedIterator struct {
	Event *FcpTaskManagerRefundReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRefundReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRefundReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRefundReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRefundReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRefundReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRefundReleased represents a RefundReleased event raised by the FcpTaskManager contract.
type FcpTaskManagerRefundReleased struct {
	TaskUid      common.Hash
	User         common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundReleased is a free log retrieval operation binding the contract event 0xcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8.
//
// Solidity: event RefundReleased(string indexed taskUid, address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRefundReleased(opts *bind.FilterOpts, taskUid []string, user []common.Address) (*FcpTaskManagerRefundReleasedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RefundReleased", taskUidRule, userRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRefundReleasedIterator{contract: _FcpTaskManager.contract, event: "RefundReleased", logs: logs, sub: sub}, nil
}

// WatchRefundReleased is a free log subscription operation binding the contract event 0xcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8.
//
// Solidity: event RefundReleased(string indexed taskUid, address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRefundReleased(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRefundReleased, taskUid []string, user []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RefundReleased", taskUidRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRefundReleased)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RefundReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundReleased is a log parse operation binding the contract event 0xcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8.
//
// Solidity: event RefundReleased(string indexed taskUid, address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRefundReleased(log types.Log) (*FcpTaskManagerRefundReleased, error) {
	event := new(FcpTaskManagerRefundReleased)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RefundReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardClaimedIterator struct {
	Event *FcpTaskManagerRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardClaimed represents a RewardClaimed event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardClaimed struct {
	CpAccount    common.Address
	Owner        common.Address
	RewardAmount *big.Int
	Payday       uint64
	Signature    []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0xfa6e3650fbb9cb93f0c97f7ed33a03523852aba3d6984c217fec7d86f94feda9.
//
// Solidity: event RewardClaimed(address indexed cpAccount, address owner, uint256 rewardAmount, uint64 payday, bytes signature)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardClaimed(opts *bind.FilterOpts, cpAccount []common.Address) (*FcpTaskManagerRewardClaimedIterator, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardClaimed", cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardClaimedIterator{contract: _FcpTaskManager.contract, event: "RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0xfa6e3650fbb9cb93f0c97f7ed33a03523852aba3d6984c217fec7d86f94feda9.
//
// Solidity: event RewardClaimed(address indexed cpAccount, address owner, uint256 rewardAmount, uint64 payday, bytes signature)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardClaimed, cpAccount []common.Address) (event.Subscription, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardClaimed", cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardClaimed)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardClaimed is a log parse operation binding the contract event 0xfa6e3650fbb9cb93f0c97f7ed33a03523852aba3d6984c217fec7d86f94feda9.
//
// Solidity: event RewardClaimed(address indexed cpAccount, address owner, uint256 rewardAmount, uint64 payday, bytes signature)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardClaimed(log types.Log) (*FcpTaskManagerRewardClaimed, error) {
	event := new(FcpTaskManagerRewardClaimed)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardReadyToClaimIterator is returned from FilterRewardReadyToClaim and is used to iterate over the raw logs and unpacked data for RewardReadyToClaim events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReadyToClaimIterator struct {
	Event *FcpTaskManagerRewardReadyToClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardReadyToClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardReadyToClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardReadyToClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardReadyToClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardReadyToClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardReadyToClaim represents a RewardReadyToClaim event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReadyToClaim struct {
	TaskUid      common.Hash
	CpAccount    common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardReadyToClaim is a free log retrieval operation binding the contract event 0xc6e13e9d3f986d21bea2ed9ba1704f00c0d92a5df49f8a4638dc9443929a150c.
//
// Solidity: event RewardReadyToClaim(string indexed taskUid, address indexed cpAccount, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardReadyToClaim(opts *bind.FilterOpts, taskUid []string, cpAccount []common.Address) (*FcpTaskManagerRewardReadyToClaimIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardReadyToClaim", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardReadyToClaimIterator{contract: _FcpTaskManager.contract, event: "RewardReadyToClaim", logs: logs, sub: sub}, nil
}

// WatchRewardReadyToClaim is a free log subscription operation binding the contract event 0xc6e13e9d3f986d21bea2ed9ba1704f00c0d92a5df49f8a4638dc9443929a150c.
//
// Solidity: event RewardReadyToClaim(string indexed taskUid, address indexed cpAccount, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardReadyToClaim(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardReadyToClaim, taskUid []string, cpAccount []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardReadyToClaim", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardReadyToClaim)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReadyToClaim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReadyToClaim is a log parse operation binding the contract event 0xc6e13e9d3f986d21bea2ed9ba1704f00c0d92a5df49f8a4638dc9443929a150c.
//
// Solidity: event RewardReadyToClaim(string indexed taskUid, address indexed cpAccount, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardReadyToClaim(log types.Log) (*FcpTaskManagerRewardReadyToClaim, error) {
	event := new(FcpTaskManagerRewardReadyToClaim)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReadyToClaim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardReleasedIterator is returned from FilterRewardReleased and is used to iterate over the raw logs and unpacked data for RewardReleased events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReleasedIterator struct {
	Event *FcpTaskManagerRewardReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardReleased represents a RewardReleased event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReleased struct {
	TaskUid      common.Hash
	CpAccount    common.Address
	Beneficiary  common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardReleased is a free log retrieval operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardReleased(opts *bind.FilterOpts, taskUid []string, cpAccount []common.Address) (*FcpTaskManagerRewardReleasedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardReleased", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardReleasedIterator{contract: _FcpTaskManager.contract, event: "RewardReleased", logs: logs, sub: sub}, nil
}

// WatchRewardReleased is a free log subscription operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardReleased(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardReleased, taskUid []string, cpAccount []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardReleased", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardReleased)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReleased is a log parse operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardReleased(log types.Log) (*FcpTaskManagerRewardReleased, error) {
	event := new(FcpTaskManagerRewardReleased)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskCompletedIterator is returned from FilterTaskCompleted and is used to iterate over the raw logs and unpacked data for TaskCompleted events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCompletedIterator struct {
	Event *FcpTaskManagerTaskCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskCompleted represents a TaskCompleted event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCompleted struct {
	TaskUid common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTaskCompleted is a free log retrieval operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskCompleted(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskCompletedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskCompleted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskCompletedIterator{contract: _FcpTaskManager.contract, event: "TaskCompleted", logs: logs, sub: sub}, nil
}

// WatchTaskCompleted is a free log subscription operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskCompleted(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskCompleted, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskCompleted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskCompleted)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCompleted is a log parse operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskCompleted(log types.Log) (*FcpTaskManagerTaskCompleted, error) {
	event := new(FcpTaskManagerTaskCompleted)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskCreatedIterator is returned from FilterTaskCreated and is used to iterate over the raw logs and unpacked data for TaskCreated events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCreatedIterator struct {
	Event *FcpTaskManagerTaskCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskCreated represents a TaskCreated event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCreated struct {
	TaskUid  common.Hash
	CpList   []common.Address
	User     common.Address
	Reward   *big.Int
	Duration *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTaskCreated is a free log retrieval operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskCreated(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskCreatedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskCreated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskCreatedIterator{contract: _FcpTaskManager.contract, event: "TaskCreated", logs: logs, sub: sub}, nil
}

// WatchTaskCreated is a free log subscription operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskCreated, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskCreated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskCreated)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCreated is a log parse operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskCreated(log types.Log) (*FcpTaskManagerTaskCreated, error) {
	event := new(FcpTaskManagerTaskCreated)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskExtendedIterator is returned from FilterTaskExtended and is used to iterate over the raw logs and unpacked data for TaskExtended events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskExtendedIterator struct {
	Event *FcpTaskManagerTaskExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskExtended represents a TaskExtended event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskExtended struct {
	TaskUid       common.Hash
	AddedDuration *big.Int
	TotalDuration *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTaskExtended is a free log retrieval operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskExtended(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskExtendedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskExtended", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskExtendedIterator{contract: _FcpTaskManager.contract, event: "TaskExtended", logs: logs, sub: sub}, nil
}

// WatchTaskExtended is a free log subscription operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskExtended(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskExtended, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskExtended", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskExtended)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskExtended is a log parse operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskExtended(log types.Log) (*FcpTaskManagerTaskExtended, error) {
	event := new(FcpTaskManagerTaskExtended)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskTerminatedIterator is returned from FilterTaskTerminated and is used to iterate over the raw logs and unpacked data for TaskTerminated events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskTerminatedIterator struct {
	Event *FcpTaskManagerTaskTerminated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskTerminatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskTerminated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskTerminated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskTerminatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskTerminatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskTerminated represents a TaskTerminated event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskTerminated struct {
	TaskUid            common.Hash
	TerminateTimestamp *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterTaskTerminated is a free log retrieval operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskTerminated(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskTerminatedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskTerminated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskTerminatedIterator{contract: _FcpTaskManager.contract, event: "TaskTerminated", logs: logs, sub: sub}, nil
}

// WatchTaskTerminated is a free log subscription operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskTerminated(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskTerminated, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskTerminated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskTerminated)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskTerminated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskTerminated is a log parse operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskTerminated(log types.Log) (*FcpTaskManagerTaskTerminated, error) {
	event := new(FcpTaskManagerTaskTerminated)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskTerminated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerURISubmittedIterator is returned from FilterURISubmitted and is used to iterate over the raw logs and unpacked data for URISubmitted events raised by the FcpTaskManager contract.
type FcpTaskManagerURISubmittedIterator struct {
	Event *FcpTaskManagerURISubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerURISubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerURISubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerURISubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerURISubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerURISubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerURISubmitted represents a URISubmitted event raised by the FcpTaskManager contract.
type FcpTaskManagerURISubmitted struct {
	TaskUid   common.Hash
	Submitter common.Address
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterURISubmitted is a free log retrieval operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterURISubmitted(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerURISubmittedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "URISubmitted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerURISubmittedIterator{contract: _FcpTaskManager.contract, event: "URISubmitted", logs: logs, sub: sub}, nil
}

// WatchURISubmitted is a free log subscription operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchURISubmitted(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerURISubmitted, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "URISubmitted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerURISubmitted)
				if err := _FcpTaskManager.contract.UnpackLog(event, "URISubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURISubmitted is a log parse operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseURISubmitted(log types.Log) (*FcpTaskManagerURISubmitted, error) {
	event := new(FcpTaskManagerURISubmitted)
	if err := _FcpTaskManager.contract.UnpackLog(event, "URISubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the FcpTaskManager contract.
type FcpTaskManagerUpgradedIterator struct {
	Event *FcpTaskManagerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerUpgraded represents a Upgraded event raised by the FcpTaskManager contract.
type FcpTaskManagerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*FcpTaskManagerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerUpgradedIterator{contract: _FcpTaskManager.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerUpgraded)
				if err := _FcpTaskManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseUpgraded(log types.Log) (*FcpTaskManagerUpgraded, error) {
	event := new(FcpTaskManagerUpgraded)
	if err := _FcpTaskManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
