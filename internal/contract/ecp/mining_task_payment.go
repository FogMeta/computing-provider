// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ecp

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TaskPaymentMetaData contains all meta data concerning the TaskPayment contract.
var TaskPaymentMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialBlocksForWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBlocksForWithdrawal\",\"type\":\"uint256\"}],\"name\":\"BlocksForWithdrawalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConfirmEscrowToAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"}],\"name\":\"PlatformWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestEscrowToAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"taskUUID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"TransferToCPBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realPlatformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"TransferToPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferedToEscrow\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"escrow\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRequestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRequestBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cps\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"taskUUIDs\",\"type\":\"string[]\"}],\"name\":\"batchPaymentToCP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksForWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmWithdrawEscrowToAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"escrow\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasicInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawEscrowToAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlocksForWithdrawal\",\"type\":\"uint256\"}],\"name\":\"setBlocksForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setPlatformFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setPlatformWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAvailableToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5060405161346038038061346083398181016040528101906100329190610303565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c9190610379565b60405180910390fd5b6100b4816101a660201b60201c565b5083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600381905550806006819055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050610394565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061029a8261026f565b9050919050565b6102aa8161028f565b81146102b557600080fd5b50565b6000815190506102c7816102a1565b92915050565b6000819050919050565b6102e0816102cd565b81146102eb57600080fd5b50565b6000815190506102fd816102d7565b92915050565b6000806000806080858703121561031d5761031c61026a565b5b600061032b878288016102b8565b945050602061033c878288016102b8565b935050604061034d878288016102ee565b925050606061035e878288016102ee565b91505092959194509250565b6103738161028f565b82525050565b600060208201905061038e600083018461036a565b92915050565b6130bd806103a36000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a6f9dae11161007c578063a6f9dae11461037a578063b6b55f2514610396578063eeca08f0146103b2578063f2fde38b146103d0578063fa2af9da146103ec578063fc0c546a1461040a57610158565b8063715018a6146102c85780638831e9cf146102d25780638da5cb5b146102ee578063927fef2e1461030c57806393423e9c146103285780639f999da31461035957610158565b8063429b62e511610115578063429b62e5146101f3578063486e3c0f14610223578063569c67ec146102415780635e5c06e21461025d5780636a6e95d11461029057806370480275146102ac57610158565b806303597d091461015d5780631785f53c146101795780632558c6931461019557806326a4e8d2146101b15780632e9a30f5146101cd5780633ef8ebf9146101d7575b600080fd5b610177600480360381019061017291906121c3565b610428565b005b610193600480360381019061018e919061229a565b610898565b005b6101af60048036038101906101aa91906122c7565b61093e565b005b6101cb60048036038101906101c6919061229a565b610b4c565b005b6101d5610bdb565b005b6101f160048036038101906101ec91906122c7565b610f51565b005b61020d6004803603810190610208919061229a565b6110fa565b60405161021a919061230f565b60405180910390f35b61022b61111a565b6040516102389190612339565b60405180910390f35b61025b600480360381019061025691906122c7565b611120565b005b6102776004803603810190610272919061229a565b6112a7565b604051610287949392919061236d565b60405180910390f35b6102aa60048036038101906102a591906122c7565b6112d7565b005b6102c660048036038101906102c1919061229a565b611363565b005b6102d0611409565b005b6102ec60048036038101906102e7919061229a565b61141d565b005b6102f66114ac565b60405161030391906123c1565b60405180910390f35b610326600480360381019061032191906122c7565b6114d5565b005b610342600480360381019061033d919061229a565b61151e565b6040516103509291906123dc565b60405180910390f35b610361611578565b6040516103719493929190612405565b60405180910390f35b610394600480360381019061038f919061229a565b6115d8565b005b6103b060048036038101906103ab91906122c7565b6115ec565b005b6103ba611777565b6040516103c79190612339565b60405180910390f35b6103ea60048036038101906103e5919061229a565b61177d565b005b6103f4611803565b60405161040191906123c1565b60405180910390f35b610412611829565b60405161041f91906124a9565b60405180910390f35b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166104b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ab90612521565b60405180910390fd5b825184511480156104c6575081518451145b610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc906125b3565b60405180910390fd5b83518151148015610517575082518151145b610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90612645565b60405180910390fd5b60005b8451811015610891576000606460035485848151811061057c5761057b612665565b5b602002602001015161058e91906126c3565b6105989190612734565b90506000600460008885815181106105b3576105b2612665565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060008282121561060b578161060d565b825b905082600460008a878151811061062757610626612665565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461067b9190612765565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016107019291906127a8565b6020604051808303816000875af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906127fd565b610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a9061289c565b60405180910390fd5b60008187868151811061079957610798612665565b5b60200260200101516107ab91906128bc565b90506108078686815181106107c3576107c2612665565b5b60200260200101518a87815181106107de576107dd612665565b5b60200260200101518a88815181106107f9576107f8612665565b5b60200260200101518461184f565b7f41a47e17913f31a7296c4ed86149dea9e40d822378cbdae4532779bd7ebb7e4989868151811061083b5761083a612665565b5b6020026020010151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684876040516108789493929190612405565b60405180910390a1505050508080600101915050610559565b5050505050565b6108a0611c16565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f60405160405180910390a250565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba9061293c565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610a1591906128bc565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a799291906127a8565b6020604051808303816000875af1158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc91906127fd565b610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af2906129a8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6582604051610b419190612339565b60405180910390a250565b610b54611c16565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fd82cad5fdc98633445b90f806f2e1a61a5409f92187ee9cd87f1da18c906926660405160405180910390a250565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5790612a14565b60405180910390fd5b600654600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610cb09190612a34565b431015610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990612ada565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411610d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6e90612b46565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610e109190612765565b9250508190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610e699190612a34565b925050819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055503373ffffffffffffffffffffffffffffffffffffffff167fb8a7dd621b27da255b5a1d95b4526f99d4f260410c40fd664b31092e395881f982604051610f469190612339565b60405180910390a250565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541215610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90612bb2565b60405180910390fd5b60008111611019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101090612c44565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555043600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055503373ffffffffffffffffffffffffffffffffffffffff167f5b8db30c5eabdf09ef70381abe76260b8a18996115f82857349aefca8d0c59d643836040516110ef929190612c64565b60405180910390a250565b60056020528060005260406000206000915054906101000a900460ff1681565b60065481565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612cd9565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546111f691906128bc565b9250508190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461124f9190612cf9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fdf7545b95b22b9faf026be7aaf1b3bc7b83e6e9d72b32281a6e3645fb381f5d38260405161129c9190612339565b60405180910390a250565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6112df611c16565b60008111611322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131990612daf565b60405180910390fd5b806006819055507fa9fb4003d08029d46b7910208f83e7a7c0c273b4621ce61c5479692c6c98f7a1816040516113589190612339565b60405180910390a150565b61136b611c16565b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33960405160405180910390a250565b611411611c16565b61141b6000611c9d565b565b611425611c16565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f0c7dd120b8e93acfeb4b1c7e9b4a2a9e092f618597b362feb978583eeb4906e460405160405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114dd611c16565b806003819055507f8922da0ad7fd0fa46cfd1eb240eba0f22a630928317ba68e53fe1a16b498c2c5816040516115139190612339565b60405180910390a150565b6000806000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015481600101549250925050915091565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354600654935093509350935090919293565b6115e0611c16565b6115e98161177d565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161164b93929190612dcf565b6020604051808303816000875af115801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e91906127fd565b6116cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c4906129a8565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461171f9190612a34565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c48260405161176c9190612339565b60405180910390a250565b60035481565b611785611c16565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117f75760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117ee91906123c1565b60405180910390fd5b61180081611c9d565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d290612521565b60405180910390fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000828212156119325781611934565b825b905082600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546119889190612765565b925050819055506000808573ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f565a2e2c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611a399190612e77565b6000604051808303816000865af19150503d8060008114611a76576040519150601f19603f3d011682016040523d82523d6000602084013e611a7b565b606091505b509150915081611ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab790612f00565b60405180910390fd5b600081806020019051810190611ad69190612f5e565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401611b359291906127a8565b6020604051808303816000875af1158015611b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7891906127fd565b611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae90612fd7565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff167f1afb519921fbc0153fa9ae324dd48abc4017b4d5285bb3c97f4018ec0965173c8a8a8488604051611c03949392919061303b565b60405180910390a2505050505050505050565b611c1e611d61565b73ffffffffffffffffffffffffffffffffffffffff16611c3c6114ac565b73ffffffffffffffffffffffffffffffffffffffff1614611c9b57611c5f611d61565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611c9291906123c1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dcb82611d82565b810181811067ffffffffffffffff82111715611dea57611de9611d93565b5b80604052505050565b6000611dfd611d69565b9050611e098282611dc2565b919050565b600067ffffffffffffffff821115611e2957611e28611d93565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e6a82611e3f565b9050919050565b611e7a81611e5f565b8114611e8557600080fd5b50565b600081359050611e9781611e71565b92915050565b6000611eb0611eab84611e0e565b611df3565b90508083825260208201905060208402830185811115611ed357611ed2611e3a565b5b835b81811015611efc5780611ee88882611e88565b845260208401935050602081019050611ed5565b5050509392505050565b600082601f830112611f1b57611f1a611d7d565b5b8135611f2b848260208601611e9d565b91505092915050565b600067ffffffffffffffff821115611f4f57611f4e611d93565b5b602082029050602081019050919050565b6000819050919050565b611f7381611f60565b8114611f7e57600080fd5b50565b600081359050611f9081611f6a565b92915050565b6000611fa9611fa484611f34565b611df3565b90508083825260208201905060208402830185811115611fcc57611fcb611e3a565b5b835b81811015611ff55780611fe18882611f81565b845260208401935050602081019050611fce565b5050509392505050565b600082601f83011261201457612013611d7d565b5b8135612024848260208601611f96565b91505092915050565b600067ffffffffffffffff82111561204857612047611d93565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111561207957612078611d93565b5b61208282611d82565b9050602081019050919050565b82818337600083830152505050565b60006120b16120ac8461205e565b611df3565b9050828152602081018484840111156120cd576120cc612059565b5b6120d884828561208f565b509392505050565b600082601f8301126120f5576120f4611d7d565b5b813561210584826020860161209e565b91505092915050565b600061212161211c8461202d565b611df3565b9050808382526020820190506020840283018581111561214457612143611e3a565b5b835b8181101561218b57803567ffffffffffffffff81111561216957612168611d7d565b5b80860161217689826120e0565b85526020850194505050602081019050612146565b5050509392505050565b600082601f8301126121aa576121a9611d7d565b5b81356121ba84826020860161210e565b91505092915050565b600080600080608085870312156121dd576121dc611d73565b5b600085013567ffffffffffffffff8111156121fb576121fa611d78565b5b61220787828801611f06565b945050602085013567ffffffffffffffff81111561222857612227611d78565b5b61223487828801611f06565b935050604085013567ffffffffffffffff81111561225557612254611d78565b5b61226187828801611fff565b925050606085013567ffffffffffffffff81111561228257612281611d78565b5b61228e87828801612195565b91505092959194509250565b6000602082840312156122b0576122af611d73565b5b60006122be84828501611e88565b91505092915050565b6000602082840312156122dd576122dc611d73565b5b60006122eb84828501611f81565b91505092915050565b60008115159050919050565b612309816122f4565b82525050565b60006020820190506123246000830184612300565b92915050565b61233381611f60565b82525050565b600060208201905061234e600083018461232a565b92915050565b6000819050919050565b61236781612354565b82525050565b6000608082019050612382600083018761232a565b61238f602083018661235e565b61239c604083018561232a565b6123a9606083018461232a565b95945050505050565b6123bb81611e5f565b82525050565b60006020820190506123d660008301846123b2565b92915050565b60006040820190506123f1600083018561232a565b6123fe602083018461235e565b9392505050565b600060808201905061241a60008301876123b2565b61242760208301866123b2565b612434604083018561232a565b612441606083018461232a565b95945050505050565b6000819050919050565b600061246f61246a61246584611e3f565b61244a565b611e3f565b9050919050565b600061248182612454565b9050919050565b600061249382612476565b9050919050565b6124a381612488565b82525050565b60006020820190506124be600083018461249a565b92915050565b600082825260208201905092915050565b7f4e6f7420616e2061646d696e0000000000000000000000000000000000000000600082015250565b600061250b600c836124c4565b9150612516826124d5565b602082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b7f4d69736d61746368656420696e7075742061727261797320616d6f6e6720752c60008201527f206320616e642061000000000000000000000000000000000000000000000000602082015250565b600061259d6028836124c4565b91506125a882612541565b604082019050919050565b600060208201905081810360008301526125cc81612590565b9050919050565b7f4d69736d61746368656420696e7075742061727261797320616d6f6e6720742c60008201527f207520616e642063000000000000000000000000000000000000000000000000602082015250565b600061262f6028836124c4565b915061263a826125d3565b604082019050919050565b6000602082019050818103600083015261265e81612622565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ce82611f60565b91506126d983611f60565b92508282026126e781611f60565b915082820484148315176126fe576126fd612694565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061273f82611f60565b915061274a83611f60565b92508261275a57612759612705565b5b828204905092915050565b600061277082612354565b915061277b83612354565b92508282039050818112600084121682821360008512151617156127a2576127a1612694565b5b92915050565b60006040820190506127bd60008301856123b2565b6127ca602083018461232a565b9392505050565b6127da816122f4565b81146127e557600080fd5b50565b6000815190506127f7816127d1565b92915050565b60006020828403121561281357612812611d73565b5b6000612821848285016127e8565b91505092915050565b7f5472616e73666572206f6620706c6174666f726d2066656520746f20706c617460008201527f666f726d2077616c6c6574206661696c65640000000000000000000000000000602082015250565b60006128866032836124c4565b91506128918261282a565b604082019050919050565b600060208201905081810360008301526128b581612879565b9050919050565b60006128c782611f60565b91506128d283611f60565b92508282039050818111156128ea576128e9612694565b5b92915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006129266014836124c4565b9150612931826128f0565b602082019050919050565b6000602082019050818103600083015261295581612919565b9050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612992600f836124c4565b915061299d8261295c565b602082019050919050565b600060208201905081810360008301526129c181612985565b9050919050565b7f4e6f207769746864726177616c20726571756573740000000000000000000000600082015250565b60006129fe6015836124c4565b9150612a09826129c8565b602082019050919050565b60006020820190508181036000830152612a2d816129f1565b9050919050565b6000612a3f82611f60565b9150612a4a83611f60565b9250828201905080821115612a6257612a61612694565b5b92915050565b7f5769746864726177616c206e6f742079657420617661696c61626c652062617360008201527f6564206f6e20626c6f636b206865696768740000000000000000000000000000602082015250565b6000612ac46032836124c4565b9150612acf82612a68565b604082019050919050565b60006020820190508181036000830152612af381612ab7565b9050919050565b7f4e6f207769746864726177616c20616d6f756e74207265636f72646564000000600082015250565b6000612b30601d836124c4565b9150612b3b82612afa565b602082019050919050565b60006020820190508181036000830152612b5f81612b23565b9050919050565b7f496e73756666696369656e7420457363726f772062616c616e63650000000000600082015250565b6000612b9c601b836124c4565b9150612ba782612b66565b602082019050919050565b60006020820190508181036000830152612bcb81612b8f565b9050919050565b7f5769746864726177616c20616d6f756e74206d7573742062652067726561746560008201527f72207468616e207a65726f000000000000000000000000000000000000000000602082015250565b6000612c2e602b836124c4565b9150612c3982612bd2565b604082019050919050565b60006020820190508181036000830152612c5d81612c21565b9050919050565b6000604082019050612c79600083018561232a565b612c86602083018461232a565b9392505050565b7f496e73756666696369656e742066756e6420746f207472616e73666572000000600082015250565b6000612cc3601d836124c4565b9150612cce82612c8d565b602082019050919050565b60006020820190508181036000830152612cf281612cb6565b9050919050565b6000612d0482612354565b9150612d0f83612354565b925082820190508281121560008312168382126000841215161715612d3757612d36612694565b5b92915050565b7f426c6f636b7320666f72207769746864726177616c206d75737420626520677260008201527f6561746572207468616e207a65726f0000000000000000000000000000000000602082015250565b6000612d99602f836124c4565b9150612da482612d3d565b604082019050919050565b60006020820190508181036000830152612dc881612d8c565b9050919050565b6000606082019050612de460008301866123b2565b612df160208301856123b2565b612dfe604083018461232a565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015612e3a578082015181840152602081019050612e1f565b60008484015250505050565b6000612e5182612e06565b612e5b8185612e11565b9350612e6b818560208601612e1c565b80840191505092915050565b6000612e838284612e46565b915081905092915050565b7f4661696c656420746f2063616c6c2067657442656e656669636961727920667560008201527f6e6374696f6e206f662043504163636f756e7400000000000000000000000000602082015250565b6000612eea6033836124c4565b9150612ef582612e8e565b604082019050919050565b60006020820190508181036000830152612f1981612edd565b9050919050565b6000612f2b82611e3f565b9050919050565b612f3b81612f20565b8114612f4657600080fd5b50565b600081519050612f5881612f32565b92915050565b600060208284031215612f7457612f73611d73565b5b6000612f8284828501612f49565b91505092915050565b7f5472616e7366657220746f2062656e6566696369617279206661696c65640000600082015250565b6000612fc1601e836124c4565b9150612fcc82612f8b565b602082019050919050565b60006020820190508181036000830152612ff081612fb4565b9050919050565b600081519050919050565b600061300d82612ff7565b61301781856124c4565b9350613027818560208601612e1c565b61303081611d82565b840191505092915050565b600060808201905081810360008301526130558187613002565b905061306460208301866123b2565b61307160408301856123b2565b61307e606083018461232a565b9594505050505056fea2646970667358221220198dffc80f501e4d5da54499233a6e11fda702ae2a10ccfbe09185bb4273380164736f6c63430008190033",
}

// TaskPaymentABI is the input ABI used to generate the binding from.
// Deprecated: Use TaskPaymentMetaData.ABI instead.
var TaskPaymentABI = TaskPaymentMetaData.ABI

// TaskPaymentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TaskPaymentMetaData.Bin instead.
var TaskPaymentBin = TaskPaymentMetaData.Bin

// DeployTaskPayment deploys a new Ethereum contract, binding an instance of TaskPayment to it.
func DeployTaskPayment(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenAddress common.Address, _platformWallet common.Address, _platformFeeRate *big.Int, _initialBlocksForWithdrawal *big.Int) (common.Address, *types.Transaction, *TaskPayment, error) {
	parsed, err := TaskPaymentMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TaskPaymentBin), backend, _tokenAddress, _platformWallet, _platformFeeRate, _initialBlocksForWithdrawal)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TaskPayment{TaskPaymentCaller: TaskPaymentCaller{contract: contract}, TaskPaymentTransactor: TaskPaymentTransactor{contract: contract}, TaskPaymentFilterer: TaskPaymentFilterer{contract: contract}}, nil
}

// TaskPayment is an auto generated Go binding around an Ethereum contract.
type TaskPayment struct {
	TaskPaymentCaller     // Read-only binding to the contract
	TaskPaymentTransactor // Write-only binding to the contract
	TaskPaymentFilterer   // Log filterer for contract events
}

// TaskPaymentCaller is an auto generated read-only Go binding around an Ethereum contract.
type TaskPaymentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskPaymentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TaskPaymentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskPaymentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TaskPaymentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskPaymentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TaskPaymentSession struct {
	Contract     *TaskPayment      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TaskPaymentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TaskPaymentCallerSession struct {
	Contract *TaskPaymentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TaskPaymentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TaskPaymentTransactorSession struct {
	Contract     *TaskPaymentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TaskPaymentRaw is an auto generated low-level Go binding around an Ethereum contract.
type TaskPaymentRaw struct {
	Contract *TaskPayment // Generic contract binding to access the raw methods on
}

// TaskPaymentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TaskPaymentCallerRaw struct {
	Contract *TaskPaymentCaller // Generic read-only contract binding to access the raw methods on
}

// TaskPaymentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TaskPaymentTransactorRaw struct {
	Contract *TaskPaymentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTaskPayment creates a new instance of TaskPayment, bound to a specific deployed contract.
func NewTaskPayment(address common.Address, backend bind.ContractBackend) (*TaskPayment, error) {
	contract, err := bindTaskPayment(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TaskPayment{TaskPaymentCaller: TaskPaymentCaller{contract: contract}, TaskPaymentTransactor: TaskPaymentTransactor{contract: contract}, TaskPaymentFilterer: TaskPaymentFilterer{contract: contract}}, nil
}

// NewTaskPaymentCaller creates a new read-only instance of TaskPayment, bound to a specific deployed contract.
func NewTaskPaymentCaller(address common.Address, caller bind.ContractCaller) (*TaskPaymentCaller, error) {
	contract, err := bindTaskPayment(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentCaller{contract: contract}, nil
}

// NewTaskPaymentTransactor creates a new write-only instance of TaskPayment, bound to a specific deployed contract.
func NewTaskPaymentTransactor(address common.Address, transactor bind.ContractTransactor) (*TaskPaymentTransactor, error) {
	contract, err := bindTaskPayment(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentTransactor{contract: contract}, nil
}

// NewTaskPaymentFilterer creates a new log filterer instance of TaskPayment, bound to a specific deployed contract.
func NewTaskPaymentFilterer(address common.Address, filterer bind.ContractFilterer) (*TaskPaymentFilterer, error) {
	contract, err := bindTaskPayment(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentFilterer{contract: contract}, nil
}

// bindTaskPayment binds a generic wrapper to an already deployed contract.
func bindTaskPayment(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TaskPaymentMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TaskPayment *TaskPaymentRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TaskPayment.Contract.TaskPaymentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TaskPayment *TaskPaymentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskPayment.Contract.TaskPaymentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TaskPayment *TaskPaymentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TaskPayment.Contract.TaskPaymentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TaskPayment *TaskPaymentCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TaskPayment.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TaskPayment *TaskPaymentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskPayment.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TaskPayment *TaskPaymentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TaskPayment.Contract.contract.Transact(opts, method, params...)
}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(uint256 available, int256 escrow, uint256 withdrawRequestAmount, uint256 withdrawRequestBlock)
func (_TaskPayment *TaskPaymentCaller) Accounts(opts *bind.CallOpts, arg0 common.Address) (struct {
	Available             *big.Int
	Escrow                *big.Int
	WithdrawRequestAmount *big.Int
	WithdrawRequestBlock  *big.Int
}, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "accounts", arg0)

	outstruct := new(struct {
		Available             *big.Int
		Escrow                *big.Int
		WithdrawRequestAmount *big.Int
		WithdrawRequestBlock  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Available = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Escrow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawRequestAmount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.WithdrawRequestBlock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(uint256 available, int256 escrow, uint256 withdrawRequestAmount, uint256 withdrawRequestBlock)
func (_TaskPayment *TaskPaymentSession) Accounts(arg0 common.Address) (struct {
	Available             *big.Int
	Escrow                *big.Int
	WithdrawRequestAmount *big.Int
	WithdrawRequestBlock  *big.Int
}, error) {
	return _TaskPayment.Contract.Accounts(&_TaskPayment.CallOpts, arg0)
}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(uint256 available, int256 escrow, uint256 withdrawRequestAmount, uint256 withdrawRequestBlock)
func (_TaskPayment *TaskPaymentCallerSession) Accounts(arg0 common.Address) (struct {
	Available             *big.Int
	Escrow                *big.Int
	WithdrawRequestAmount *big.Int
	WithdrawRequestBlock  *big.Int
}, error) {
	return _TaskPayment.Contract.Accounts(&_TaskPayment.CallOpts, arg0)
}

// Admins is a free data retrieval call binding the contract method 0x429b62e5.
//
// Solidity: function admins(address ) view returns(bool)
func (_TaskPayment *TaskPaymentCaller) Admins(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "admins", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Admins is a free data retrieval call binding the contract method 0x429b62e5.
//
// Solidity: function admins(address ) view returns(bool)
func (_TaskPayment *TaskPaymentSession) Admins(arg0 common.Address) (bool, error) {
	return _TaskPayment.Contract.Admins(&_TaskPayment.CallOpts, arg0)
}

// Admins is a free data retrieval call binding the contract method 0x429b62e5.
//
// Solidity: function admins(address ) view returns(bool)
func (_TaskPayment *TaskPaymentCallerSession) Admins(arg0 common.Address) (bool, error) {
	return _TaskPayment.Contract.Admins(&_TaskPayment.CallOpts, arg0)
}

// BlocksForWithdrawal is a free data retrieval call binding the contract method 0x486e3c0f.
//
// Solidity: function blocksForWithdrawal() view returns(uint256)
func (_TaskPayment *TaskPaymentCaller) BlocksForWithdrawal(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "blocksForWithdrawal")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlocksForWithdrawal is a free data retrieval call binding the contract method 0x486e3c0f.
//
// Solidity: function blocksForWithdrawal() view returns(uint256)
func (_TaskPayment *TaskPaymentSession) BlocksForWithdrawal() (*big.Int, error) {
	return _TaskPayment.Contract.BlocksForWithdrawal(&_TaskPayment.CallOpts)
}

// BlocksForWithdrawal is a free data retrieval call binding the contract method 0x486e3c0f.
//
// Solidity: function blocksForWithdrawal() view returns(uint256)
func (_TaskPayment *TaskPaymentCallerSession) BlocksForWithdrawal() (*big.Int, error) {
	return _TaskPayment.Contract.BlocksForWithdrawal(&_TaskPayment.CallOpts)
}

// GetAccountBalance is a free data retrieval call binding the contract method 0x93423e9c.
//
// Solidity: function getAccountBalance(address wallet) view returns(uint256 available, int256 escrow)
func (_TaskPayment *TaskPaymentCaller) GetAccountBalance(opts *bind.CallOpts, wallet common.Address) (struct {
	Available *big.Int
	Escrow    *big.Int
}, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "getAccountBalance", wallet)

	outstruct := new(struct {
		Available *big.Int
		Escrow    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Available = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Escrow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetAccountBalance is a free data retrieval call binding the contract method 0x93423e9c.
//
// Solidity: function getAccountBalance(address wallet) view returns(uint256 available, int256 escrow)
func (_TaskPayment *TaskPaymentSession) GetAccountBalance(wallet common.Address) (struct {
	Available *big.Int
	Escrow    *big.Int
}, error) {
	return _TaskPayment.Contract.GetAccountBalance(&_TaskPayment.CallOpts, wallet)
}

// GetAccountBalance is a free data retrieval call binding the contract method 0x93423e9c.
//
// Solidity: function getAccountBalance(address wallet) view returns(uint256 available, int256 escrow)
func (_TaskPayment *TaskPaymentCallerSession) GetAccountBalance(wallet common.Address) (struct {
	Available *big.Int
	Escrow    *big.Int
}, error) {
	return _TaskPayment.Contract.GetAccountBalance(&_TaskPayment.CallOpts, wallet)
}

// GetBasicInfo is a free data retrieval call binding the contract method 0x9f999da3.
//
// Solidity: function getBasicInfo() view returns(address tokenAddress, address platformAddress, uint256 feeRate, uint256 withdrawalBlocks)
func (_TaskPayment *TaskPaymentCaller) GetBasicInfo(opts *bind.CallOpts) (struct {
	TokenAddress     common.Address
	PlatformAddress  common.Address
	FeeRate          *big.Int
	WithdrawalBlocks *big.Int
}, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "getBasicInfo")

	outstruct := new(struct {
		TokenAddress     common.Address
		PlatformAddress  common.Address
		FeeRate          *big.Int
		WithdrawalBlocks *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.PlatformAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.FeeRate = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.WithdrawalBlocks = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetBasicInfo is a free data retrieval call binding the contract method 0x9f999da3.
//
// Solidity: function getBasicInfo() view returns(address tokenAddress, address platformAddress, uint256 feeRate, uint256 withdrawalBlocks)
func (_TaskPayment *TaskPaymentSession) GetBasicInfo() (struct {
	TokenAddress     common.Address
	PlatformAddress  common.Address
	FeeRate          *big.Int
	WithdrawalBlocks *big.Int
}, error) {
	return _TaskPayment.Contract.GetBasicInfo(&_TaskPayment.CallOpts)
}

// GetBasicInfo is a free data retrieval call binding the contract method 0x9f999da3.
//
// Solidity: function getBasicInfo() view returns(address tokenAddress, address platformAddress, uint256 feeRate, uint256 withdrawalBlocks)
func (_TaskPayment *TaskPaymentCallerSession) GetBasicInfo() (struct {
	TokenAddress     common.Address
	PlatformAddress  common.Address
	FeeRate          *big.Int
	WithdrawalBlocks *big.Int
}, error) {
	return _TaskPayment.Contract.GetBasicInfo(&_TaskPayment.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TaskPayment *TaskPaymentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TaskPayment *TaskPaymentSession) Owner() (common.Address, error) {
	return _TaskPayment.Contract.Owner(&_TaskPayment.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TaskPayment *TaskPaymentCallerSession) Owner() (common.Address, error) {
	return _TaskPayment.Contract.Owner(&_TaskPayment.CallOpts)
}

// PlatformFeeRate is a free data retrieval call binding the contract method 0xeeca08f0.
//
// Solidity: function platformFeeRate() view returns(uint256)
func (_TaskPayment *TaskPaymentCaller) PlatformFeeRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "platformFeeRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlatformFeeRate is a free data retrieval call binding the contract method 0xeeca08f0.
//
// Solidity: function platformFeeRate() view returns(uint256)
func (_TaskPayment *TaskPaymentSession) PlatformFeeRate() (*big.Int, error) {
	return _TaskPayment.Contract.PlatformFeeRate(&_TaskPayment.CallOpts)
}

// PlatformFeeRate is a free data retrieval call binding the contract method 0xeeca08f0.
//
// Solidity: function platformFeeRate() view returns(uint256)
func (_TaskPayment *TaskPaymentCallerSession) PlatformFeeRate() (*big.Int, error) {
	return _TaskPayment.Contract.PlatformFeeRate(&_TaskPayment.CallOpts)
}

// PlatformWallet is a free data retrieval call binding the contract method 0xfa2af9da.
//
// Solidity: function platformWallet() view returns(address)
func (_TaskPayment *TaskPaymentCaller) PlatformWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "platformWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PlatformWallet is a free data retrieval call binding the contract method 0xfa2af9da.
//
// Solidity: function platformWallet() view returns(address)
func (_TaskPayment *TaskPaymentSession) PlatformWallet() (common.Address, error) {
	return _TaskPayment.Contract.PlatformWallet(&_TaskPayment.CallOpts)
}

// PlatformWallet is a free data retrieval call binding the contract method 0xfa2af9da.
//
// Solidity: function platformWallet() view returns(address)
func (_TaskPayment *TaskPaymentCallerSession) PlatformWallet() (common.Address, error) {
	return _TaskPayment.Contract.PlatformWallet(&_TaskPayment.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_TaskPayment *TaskPaymentCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TaskPayment.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_TaskPayment *TaskPaymentSession) Token() (common.Address, error) {
	return _TaskPayment.Contract.Token(&_TaskPayment.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_TaskPayment *TaskPaymentCallerSession) Token() (common.Address, error) {
	return _TaskPayment.Contract.Token(&_TaskPayment.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address admin) returns()
func (_TaskPayment *TaskPaymentTransactor) AddAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "addAdmin", admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address admin) returns()
func (_TaskPayment *TaskPaymentSession) AddAdmin(admin common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.AddAdmin(&_TaskPayment.TransactOpts, admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address admin) returns()
func (_TaskPayment *TaskPaymentTransactorSession) AddAdmin(admin common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.AddAdmin(&_TaskPayment.TransactOpts, admin)
}

// BatchPaymentToCP is a paid mutator transaction binding the contract method 0x03597d09.
//
// Solidity: function batchPaymentToCP(address[] users, address[] cps, uint256[] amounts, string[] taskUUIDs) returns()
func (_TaskPayment *TaskPaymentTransactor) BatchPaymentToCP(opts *bind.TransactOpts, users []common.Address, cps []common.Address, amounts []*big.Int, taskUUIDs []string) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "batchPaymentToCP", users, cps, amounts, taskUUIDs)
}

// BatchPaymentToCP is a paid mutator transaction binding the contract method 0x03597d09.
//
// Solidity: function batchPaymentToCP(address[] users, address[] cps, uint256[] amounts, string[] taskUUIDs) returns()
func (_TaskPayment *TaskPaymentSession) BatchPaymentToCP(users []common.Address, cps []common.Address, amounts []*big.Int, taskUUIDs []string) (*types.Transaction, error) {
	return _TaskPayment.Contract.BatchPaymentToCP(&_TaskPayment.TransactOpts, users, cps, amounts, taskUUIDs)
}

// BatchPaymentToCP is a paid mutator transaction binding the contract method 0x03597d09.
//
// Solidity: function batchPaymentToCP(address[] users, address[] cps, uint256[] amounts, string[] taskUUIDs) returns()
func (_TaskPayment *TaskPaymentTransactorSession) BatchPaymentToCP(users []common.Address, cps []common.Address, amounts []*big.Int, taskUUIDs []string) (*types.Transaction, error) {
	return _TaskPayment.Contract.BatchPaymentToCP(&_TaskPayment.TransactOpts, users, cps, amounts, taskUUIDs)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address newOwner) returns()
func (_TaskPayment *TaskPaymentTransactor) ChangeOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "changeOwner", newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address newOwner) returns()
func (_TaskPayment *TaskPaymentSession) ChangeOwner(newOwner common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.ChangeOwner(&_TaskPayment.TransactOpts, newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address newOwner) returns()
func (_TaskPayment *TaskPaymentTransactorSession) ChangeOwner(newOwner common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.ChangeOwner(&_TaskPayment.TransactOpts, newOwner)
}

// ConfirmWithdrawEscrowToAvailable is a paid mutator transaction binding the contract method 0x2e9a30f5.
//
// Solidity: function confirmWithdrawEscrowToAvailable() returns()
func (_TaskPayment *TaskPaymentTransactor) ConfirmWithdrawEscrowToAvailable(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "confirmWithdrawEscrowToAvailable")
}

// ConfirmWithdrawEscrowToAvailable is a paid mutator transaction binding the contract method 0x2e9a30f5.
//
// Solidity: function confirmWithdrawEscrowToAvailable() returns()
func (_TaskPayment *TaskPaymentSession) ConfirmWithdrawEscrowToAvailable() (*types.Transaction, error) {
	return _TaskPayment.Contract.ConfirmWithdrawEscrowToAvailable(&_TaskPayment.TransactOpts)
}

// ConfirmWithdrawEscrowToAvailable is a paid mutator transaction binding the contract method 0x2e9a30f5.
//
// Solidity: function confirmWithdrawEscrowToAvailable() returns()
func (_TaskPayment *TaskPaymentTransactorSession) ConfirmWithdrawEscrowToAvailable() (*types.Transaction, error) {
	return _TaskPayment.Contract.ConfirmWithdrawEscrowToAvailable(&_TaskPayment.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_TaskPayment *TaskPaymentSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.Deposit(&_TaskPayment.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.Deposit(&_TaskPayment.TransactOpts, amount)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_TaskPayment *TaskPaymentTransactor) RemoveAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "removeAdmin", admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_TaskPayment *TaskPaymentSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.RemoveAdmin(&_TaskPayment.TransactOpts, admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_TaskPayment *TaskPaymentTransactorSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.RemoveAdmin(&_TaskPayment.TransactOpts, admin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TaskPayment *TaskPaymentTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TaskPayment *TaskPaymentSession) RenounceOwnership() (*types.Transaction, error) {
	return _TaskPayment.Contract.RenounceOwnership(&_TaskPayment.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TaskPayment *TaskPaymentTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TaskPayment.Contract.RenounceOwnership(&_TaskPayment.TransactOpts)
}

// RequestWithdrawEscrowToAvailable is a paid mutator transaction binding the contract method 0x3ef8ebf9.
//
// Solidity: function requestWithdrawEscrowToAvailable(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactor) RequestWithdrawEscrowToAvailable(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "requestWithdrawEscrowToAvailable", amount)
}

// RequestWithdrawEscrowToAvailable is a paid mutator transaction binding the contract method 0x3ef8ebf9.
//
// Solidity: function requestWithdrawEscrowToAvailable(uint256 amount) returns()
func (_TaskPayment *TaskPaymentSession) RequestWithdrawEscrowToAvailable(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.RequestWithdrawEscrowToAvailable(&_TaskPayment.TransactOpts, amount)
}

// RequestWithdrawEscrowToAvailable is a paid mutator transaction binding the contract method 0x3ef8ebf9.
//
// Solidity: function requestWithdrawEscrowToAvailable(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactorSession) RequestWithdrawEscrowToAvailable(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.RequestWithdrawEscrowToAvailable(&_TaskPayment.TransactOpts, amount)
}

// SetBlocksForWithdrawal is a paid mutator transaction binding the contract method 0x6a6e95d1.
//
// Solidity: function setBlocksForWithdrawal(uint256 newBlocksForWithdrawal) returns()
func (_TaskPayment *TaskPaymentTransactor) SetBlocksForWithdrawal(opts *bind.TransactOpts, newBlocksForWithdrawal *big.Int) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "setBlocksForWithdrawal", newBlocksForWithdrawal)
}

// SetBlocksForWithdrawal is a paid mutator transaction binding the contract method 0x6a6e95d1.
//
// Solidity: function setBlocksForWithdrawal(uint256 newBlocksForWithdrawal) returns()
func (_TaskPayment *TaskPaymentSession) SetBlocksForWithdrawal(newBlocksForWithdrawal *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetBlocksForWithdrawal(&_TaskPayment.TransactOpts, newBlocksForWithdrawal)
}

// SetBlocksForWithdrawal is a paid mutator transaction binding the contract method 0x6a6e95d1.
//
// Solidity: function setBlocksForWithdrawal(uint256 newBlocksForWithdrawal) returns()
func (_TaskPayment *TaskPaymentTransactorSession) SetBlocksForWithdrawal(newBlocksForWithdrawal *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetBlocksForWithdrawal(&_TaskPayment.TransactOpts, newBlocksForWithdrawal)
}

// SetPlatformFeeRate is a paid mutator transaction binding the contract method 0x927fef2e.
//
// Solidity: function setPlatformFeeRate(uint256 _feeRate) returns()
func (_TaskPayment *TaskPaymentTransactor) SetPlatformFeeRate(opts *bind.TransactOpts, _feeRate *big.Int) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "setPlatformFeeRate", _feeRate)
}

// SetPlatformFeeRate is a paid mutator transaction binding the contract method 0x927fef2e.
//
// Solidity: function setPlatformFeeRate(uint256 _feeRate) returns()
func (_TaskPayment *TaskPaymentSession) SetPlatformFeeRate(_feeRate *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetPlatformFeeRate(&_TaskPayment.TransactOpts, _feeRate)
}

// SetPlatformFeeRate is a paid mutator transaction binding the contract method 0x927fef2e.
//
// Solidity: function setPlatformFeeRate(uint256 _feeRate) returns()
func (_TaskPayment *TaskPaymentTransactorSession) SetPlatformFeeRate(_feeRate *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetPlatformFeeRate(&_TaskPayment.TransactOpts, _feeRate)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(address _wallet) returns()
func (_TaskPayment *TaskPaymentTransactor) SetPlatformWallet(opts *bind.TransactOpts, _wallet common.Address) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "setPlatformWallet", _wallet)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(address _wallet) returns()
func (_TaskPayment *TaskPaymentSession) SetPlatformWallet(_wallet common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetPlatformWallet(&_TaskPayment.TransactOpts, _wallet)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(address _wallet) returns()
func (_TaskPayment *TaskPaymentTransactorSession) SetPlatformWallet(_wallet common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetPlatformWallet(&_TaskPayment.TransactOpts, _wallet)
}

// SetTokenAddress is a paid mutator transaction binding the contract method 0x26a4e8d2.
//
// Solidity: function setTokenAddress(address _tokenAddress) returns()
func (_TaskPayment *TaskPaymentTransactor) SetTokenAddress(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "setTokenAddress", _tokenAddress)
}

// SetTokenAddress is a paid mutator transaction binding the contract method 0x26a4e8d2.
//
// Solidity: function setTokenAddress(address _tokenAddress) returns()
func (_TaskPayment *TaskPaymentSession) SetTokenAddress(_tokenAddress common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetTokenAddress(&_TaskPayment.TransactOpts, _tokenAddress)
}

// SetTokenAddress is a paid mutator transaction binding the contract method 0x26a4e8d2.
//
// Solidity: function setTokenAddress(address _tokenAddress) returns()
func (_TaskPayment *TaskPaymentTransactorSession) SetTokenAddress(_tokenAddress common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.SetTokenAddress(&_TaskPayment.TransactOpts, _tokenAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TaskPayment *TaskPaymentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TaskPayment *TaskPaymentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.TransferOwnership(&_TaskPayment.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TaskPayment *TaskPaymentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TaskPayment.Contract.TransferOwnership(&_TaskPayment.TransactOpts, newOwner)
}

// TransferToEscrow is a paid mutator transaction binding the contract method 0x569c67ec.
//
// Solidity: function transferToEscrow(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactor) TransferToEscrow(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "transferToEscrow", amount)
}

// TransferToEscrow is a paid mutator transaction binding the contract method 0x569c67ec.
//
// Solidity: function transferToEscrow(uint256 amount) returns()
func (_TaskPayment *TaskPaymentSession) TransferToEscrow(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.TransferToEscrow(&_TaskPayment.TransactOpts, amount)
}

// TransferToEscrow is a paid mutator transaction binding the contract method 0x569c67ec.
//
// Solidity: function transferToEscrow(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactorSession) TransferToEscrow(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.TransferToEscrow(&_TaskPayment.TransactOpts, amount)
}

// WithdrawAvailableToWallet is a paid mutator transaction binding the contract method 0x2558c693.
//
// Solidity: function withdrawAvailableToWallet(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactor) WithdrawAvailableToWallet(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.contract.Transact(opts, "withdrawAvailableToWallet", amount)
}

// WithdrawAvailableToWallet is a paid mutator transaction binding the contract method 0x2558c693.
//
// Solidity: function withdrawAvailableToWallet(uint256 amount) returns()
func (_TaskPayment *TaskPaymentSession) WithdrawAvailableToWallet(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.WithdrawAvailableToWallet(&_TaskPayment.TransactOpts, amount)
}

// WithdrawAvailableToWallet is a paid mutator transaction binding the contract method 0x2558c693.
//
// Solidity: function withdrawAvailableToWallet(uint256 amount) returns()
func (_TaskPayment *TaskPaymentTransactorSession) WithdrawAvailableToWallet(amount *big.Int) (*types.Transaction, error) {
	return _TaskPayment.Contract.WithdrawAvailableToWallet(&_TaskPayment.TransactOpts, amount)
}

// TaskPaymentAdminAddedIterator is returned from FilterAdminAdded and is used to iterate over the raw logs and unpacked data for AdminAdded events raised by the TaskPayment contract.
type TaskPaymentAdminAddedIterator struct {
	Event *TaskPaymentAdminAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentAdminAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentAdminAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentAdminAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentAdminAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentAdminAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentAdminAdded represents a AdminAdded event raised by the TaskPayment contract.
type TaskPaymentAdminAdded struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAdminAdded is a free log retrieval operation binding the contract event 0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339.
//
// Solidity: event AdminAdded(address indexed admin)
func (_TaskPayment *TaskPaymentFilterer) FilterAdminAdded(opts *bind.FilterOpts, admin []common.Address) (*TaskPaymentAdminAddedIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "AdminAdded", adminRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentAdminAddedIterator{contract: _TaskPayment.contract, event: "AdminAdded", logs: logs, sub: sub}, nil
}

// WatchAdminAdded is a free log subscription operation binding the contract event 0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339.
//
// Solidity: event AdminAdded(address indexed admin)
func (_TaskPayment *TaskPaymentFilterer) WatchAdminAdded(opts *bind.WatchOpts, sink chan<- *TaskPaymentAdminAdded, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "AdminAdded", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentAdminAdded)
				if err := _TaskPayment.contract.UnpackLog(event, "AdminAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminAdded is a log parse operation binding the contract event 0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339.
//
// Solidity: event AdminAdded(address indexed admin)
func (_TaskPayment *TaskPaymentFilterer) ParseAdminAdded(log types.Log) (*TaskPaymentAdminAdded, error) {
	event := new(TaskPaymentAdminAdded)
	if err := _TaskPayment.contract.UnpackLog(event, "AdminAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentAdminRemovedIterator is returned from FilterAdminRemoved and is used to iterate over the raw logs and unpacked data for AdminRemoved events raised by the TaskPayment contract.
type TaskPaymentAdminRemovedIterator struct {
	Event *TaskPaymentAdminRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentAdminRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentAdminRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentAdminRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentAdminRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentAdminRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentAdminRemoved represents a AdminRemoved event raised by the TaskPayment contract.
type TaskPaymentAdminRemoved struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAdminRemoved is a free log retrieval operation binding the contract event 0xa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f.
//
// Solidity: event AdminRemoved(address indexed admin)
func (_TaskPayment *TaskPaymentFilterer) FilterAdminRemoved(opts *bind.FilterOpts, admin []common.Address) (*TaskPaymentAdminRemovedIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "AdminRemoved", adminRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentAdminRemovedIterator{contract: _TaskPayment.contract, event: "AdminRemoved", logs: logs, sub: sub}, nil
}

// WatchAdminRemoved is a free log subscription operation binding the contract event 0xa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f.
//
// Solidity: event AdminRemoved(address indexed admin)
func (_TaskPayment *TaskPaymentFilterer) WatchAdminRemoved(opts *bind.WatchOpts, sink chan<- *TaskPaymentAdminRemoved, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "AdminRemoved", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentAdminRemoved)
				if err := _TaskPayment.contract.UnpackLog(event, "AdminRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminRemoved is a log parse operation binding the contract event 0xa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f.
//
// Solidity: event AdminRemoved(address indexed admin)
func (_TaskPayment *TaskPaymentFilterer) ParseAdminRemoved(log types.Log) (*TaskPaymentAdminRemoved, error) {
	event := new(TaskPaymentAdminRemoved)
	if err := _TaskPayment.contract.UnpackLog(event, "AdminRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentBlocksForWithdrawalUpdatedIterator is returned from FilterBlocksForWithdrawalUpdated and is used to iterate over the raw logs and unpacked data for BlocksForWithdrawalUpdated events raised by the TaskPayment contract.
type TaskPaymentBlocksForWithdrawalUpdatedIterator struct {
	Event *TaskPaymentBlocksForWithdrawalUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentBlocksForWithdrawalUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentBlocksForWithdrawalUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentBlocksForWithdrawalUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentBlocksForWithdrawalUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentBlocksForWithdrawalUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentBlocksForWithdrawalUpdated represents a BlocksForWithdrawalUpdated event raised by the TaskPayment contract.
type TaskPaymentBlocksForWithdrawalUpdated struct {
	NewBlocksForWithdrawal *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterBlocksForWithdrawalUpdated is a free log retrieval operation binding the contract event 0xa9fb4003d08029d46b7910208f83e7a7c0c273b4621ce61c5479692c6c98f7a1.
//
// Solidity: event BlocksForWithdrawalUpdated(uint256 newBlocksForWithdrawal)
func (_TaskPayment *TaskPaymentFilterer) FilterBlocksForWithdrawalUpdated(opts *bind.FilterOpts) (*TaskPaymentBlocksForWithdrawalUpdatedIterator, error) {

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "BlocksForWithdrawalUpdated")
	if err != nil {
		return nil, err
	}
	return &TaskPaymentBlocksForWithdrawalUpdatedIterator{contract: _TaskPayment.contract, event: "BlocksForWithdrawalUpdated", logs: logs, sub: sub}, nil
}

// WatchBlocksForWithdrawalUpdated is a free log subscription operation binding the contract event 0xa9fb4003d08029d46b7910208f83e7a7c0c273b4621ce61c5479692c6c98f7a1.
//
// Solidity: event BlocksForWithdrawalUpdated(uint256 newBlocksForWithdrawal)
func (_TaskPayment *TaskPaymentFilterer) WatchBlocksForWithdrawalUpdated(opts *bind.WatchOpts, sink chan<- *TaskPaymentBlocksForWithdrawalUpdated) (event.Subscription, error) {

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "BlocksForWithdrawalUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentBlocksForWithdrawalUpdated)
				if err := _TaskPayment.contract.UnpackLog(event, "BlocksForWithdrawalUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksForWithdrawalUpdated is a log parse operation binding the contract event 0xa9fb4003d08029d46b7910208f83e7a7c0c273b4621ce61c5479692c6c98f7a1.
//
// Solidity: event BlocksForWithdrawalUpdated(uint256 newBlocksForWithdrawal)
func (_TaskPayment *TaskPaymentFilterer) ParseBlocksForWithdrawalUpdated(log types.Log) (*TaskPaymentBlocksForWithdrawalUpdated, error) {
	event := new(TaskPaymentBlocksForWithdrawalUpdated)
	if err := _TaskPayment.contract.UnpackLog(event, "BlocksForWithdrawalUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentConfirmEscrowToAvailableIterator is returned from FilterConfirmEscrowToAvailable and is used to iterate over the raw logs and unpacked data for ConfirmEscrowToAvailable events raised by the TaskPayment contract.
type TaskPaymentConfirmEscrowToAvailableIterator struct {
	Event *TaskPaymentConfirmEscrowToAvailable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentConfirmEscrowToAvailableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentConfirmEscrowToAvailable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentConfirmEscrowToAvailable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentConfirmEscrowToAvailableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentConfirmEscrowToAvailableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentConfirmEscrowToAvailable represents a ConfirmEscrowToAvailable event raised by the TaskPayment contract.
type TaskPaymentConfirmEscrowToAvailable struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConfirmEscrowToAvailable is a free log retrieval operation binding the contract event 0xb8a7dd621b27da255b5a1d95b4526f99d4f260410c40fd664b31092e395881f9.
//
// Solidity: event ConfirmEscrowToAvailable(address indexed user, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) FilterConfirmEscrowToAvailable(opts *bind.FilterOpts, user []common.Address) (*TaskPaymentConfirmEscrowToAvailableIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "ConfirmEscrowToAvailable", userRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentConfirmEscrowToAvailableIterator{contract: _TaskPayment.contract, event: "ConfirmEscrowToAvailable", logs: logs, sub: sub}, nil
}

// WatchConfirmEscrowToAvailable is a free log subscription operation binding the contract event 0xb8a7dd621b27da255b5a1d95b4526f99d4f260410c40fd664b31092e395881f9.
//
// Solidity: event ConfirmEscrowToAvailable(address indexed user, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) WatchConfirmEscrowToAvailable(opts *bind.WatchOpts, sink chan<- *TaskPaymentConfirmEscrowToAvailable, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "ConfirmEscrowToAvailable", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentConfirmEscrowToAvailable)
				if err := _TaskPayment.contract.UnpackLog(event, "ConfirmEscrowToAvailable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmEscrowToAvailable is a log parse operation binding the contract event 0xb8a7dd621b27da255b5a1d95b4526f99d4f260410c40fd664b31092e395881f9.
//
// Solidity: event ConfirmEscrowToAvailable(address indexed user, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) ParseConfirmEscrowToAvailable(log types.Log) (*TaskPaymentConfirmEscrowToAvailable, error) {
	event := new(TaskPaymentConfirmEscrowToAvailable)
	if err := _TaskPayment.contract.UnpackLog(event, "ConfirmEscrowToAvailable", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentDepositedIterator is returned from FilterDeposited and is used to iterate over the raw logs and unpacked data for Deposited events raised by the TaskPayment contract.
type TaskPaymentDepositedIterator struct {
	Event *TaskPaymentDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentDeposited represents a Deposited event raised by the TaskPayment contract.
type TaskPaymentDeposited struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDeposited is a free log retrieval operation binding the contract event 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4.
//
// Solidity: event Deposited(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) FilterDeposited(opts *bind.FilterOpts, account []common.Address) (*TaskPaymentDepositedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "Deposited", accountRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentDepositedIterator{contract: _TaskPayment.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

// WatchDeposited is a free log subscription operation binding the contract event 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4.
//
// Solidity: event Deposited(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *TaskPaymentDeposited, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "Deposited", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentDeposited)
				if err := _TaskPayment.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposited is a log parse operation binding the contract event 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4.
//
// Solidity: event Deposited(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) ParseDeposited(log types.Log) (*TaskPaymentDeposited, error) {
	event := new(TaskPaymentDeposited)
	if err := _TaskPayment.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TaskPayment contract.
type TaskPaymentOwnershipTransferredIterator struct {
	Event *TaskPaymentOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentOwnershipTransferred represents a OwnershipTransferred event raised by the TaskPayment contract.
type TaskPaymentOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TaskPayment *TaskPaymentFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TaskPaymentOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentOwnershipTransferredIterator{contract: _TaskPayment.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TaskPayment *TaskPaymentFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TaskPaymentOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentOwnershipTransferred)
				if err := _TaskPayment.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TaskPayment *TaskPaymentFilterer) ParseOwnershipTransferred(log types.Log) (*TaskPaymentOwnershipTransferred, error) {
	event := new(TaskPaymentOwnershipTransferred)
	if err := _TaskPayment.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentPlatformFeeRateSetIterator is returned from FilterPlatformFeeRateSet and is used to iterate over the raw logs and unpacked data for PlatformFeeRateSet events raised by the TaskPayment contract.
type TaskPaymentPlatformFeeRateSetIterator struct {
	Event *TaskPaymentPlatformFeeRateSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentPlatformFeeRateSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentPlatformFeeRateSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentPlatformFeeRateSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentPlatformFeeRateSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentPlatformFeeRateSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentPlatformFeeRateSet represents a PlatformFeeRateSet event raised by the TaskPayment contract.
type TaskPaymentPlatformFeeRateSet struct {
	FeeRate *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPlatformFeeRateSet is a free log retrieval operation binding the contract event 0x8922da0ad7fd0fa46cfd1eb240eba0f22a630928317ba68e53fe1a16b498c2c5.
//
// Solidity: event PlatformFeeRateSet(uint256 feeRate)
func (_TaskPayment *TaskPaymentFilterer) FilterPlatformFeeRateSet(opts *bind.FilterOpts) (*TaskPaymentPlatformFeeRateSetIterator, error) {

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "PlatformFeeRateSet")
	if err != nil {
		return nil, err
	}
	return &TaskPaymentPlatformFeeRateSetIterator{contract: _TaskPayment.contract, event: "PlatformFeeRateSet", logs: logs, sub: sub}, nil
}

// WatchPlatformFeeRateSet is a free log subscription operation binding the contract event 0x8922da0ad7fd0fa46cfd1eb240eba0f22a630928317ba68e53fe1a16b498c2c5.
//
// Solidity: event PlatformFeeRateSet(uint256 feeRate)
func (_TaskPayment *TaskPaymentFilterer) WatchPlatformFeeRateSet(opts *bind.WatchOpts, sink chan<- *TaskPaymentPlatformFeeRateSet) (event.Subscription, error) {

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "PlatformFeeRateSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentPlatformFeeRateSet)
				if err := _TaskPayment.contract.UnpackLog(event, "PlatformFeeRateSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlatformFeeRateSet is a log parse operation binding the contract event 0x8922da0ad7fd0fa46cfd1eb240eba0f22a630928317ba68e53fe1a16b498c2c5.
//
// Solidity: event PlatformFeeRateSet(uint256 feeRate)
func (_TaskPayment *TaskPaymentFilterer) ParsePlatformFeeRateSet(log types.Log) (*TaskPaymentPlatformFeeRateSet, error) {
	event := new(TaskPaymentPlatformFeeRateSet)
	if err := _TaskPayment.contract.UnpackLog(event, "PlatformFeeRateSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentPlatformWalletSetIterator is returned from FilterPlatformWalletSet and is used to iterate over the raw logs and unpacked data for PlatformWalletSet events raised by the TaskPayment contract.
type TaskPaymentPlatformWalletSetIterator struct {
	Event *TaskPaymentPlatformWalletSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentPlatformWalletSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentPlatformWalletSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentPlatformWalletSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentPlatformWalletSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentPlatformWalletSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentPlatformWalletSet represents a PlatformWalletSet event raised by the TaskPayment contract.
type TaskPaymentPlatformWalletSet struct {
	PlatformWallet common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterPlatformWalletSet is a free log retrieval operation binding the contract event 0x0c7dd120b8e93acfeb4b1c7e9b4a2a9e092f618597b362feb978583eeb4906e4.
//
// Solidity: event PlatformWalletSet(address indexed platformWallet)
func (_TaskPayment *TaskPaymentFilterer) FilterPlatformWalletSet(opts *bind.FilterOpts, platformWallet []common.Address) (*TaskPaymentPlatformWalletSetIterator, error) {

	var platformWalletRule []interface{}
	for _, platformWalletItem := range platformWallet {
		platformWalletRule = append(platformWalletRule, platformWalletItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "PlatformWalletSet", platformWalletRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentPlatformWalletSetIterator{contract: _TaskPayment.contract, event: "PlatformWalletSet", logs: logs, sub: sub}, nil
}

// WatchPlatformWalletSet is a free log subscription operation binding the contract event 0x0c7dd120b8e93acfeb4b1c7e9b4a2a9e092f618597b362feb978583eeb4906e4.
//
// Solidity: event PlatformWalletSet(address indexed platformWallet)
func (_TaskPayment *TaskPaymentFilterer) WatchPlatformWalletSet(opts *bind.WatchOpts, sink chan<- *TaskPaymentPlatformWalletSet, platformWallet []common.Address) (event.Subscription, error) {

	var platformWalletRule []interface{}
	for _, platformWalletItem := range platformWallet {
		platformWalletRule = append(platformWalletRule, platformWalletItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "PlatformWalletSet", platformWalletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentPlatformWalletSet)
				if err := _TaskPayment.contract.UnpackLog(event, "PlatformWalletSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlatformWalletSet is a log parse operation binding the contract event 0x0c7dd120b8e93acfeb4b1c7e9b4a2a9e092f618597b362feb978583eeb4906e4.
//
// Solidity: event PlatformWalletSet(address indexed platformWallet)
func (_TaskPayment *TaskPaymentFilterer) ParsePlatformWalletSet(log types.Log) (*TaskPaymentPlatformWalletSet, error) {
	event := new(TaskPaymentPlatformWalletSet)
	if err := _TaskPayment.contract.UnpackLog(event, "PlatformWalletSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentRequestEscrowToAvailableIterator is returned from FilterRequestEscrowToAvailable and is used to iterate over the raw logs and unpacked data for RequestEscrowToAvailable events raised by the TaskPayment contract.
type TaskPaymentRequestEscrowToAvailableIterator struct {
	Event *TaskPaymentRequestEscrowToAvailable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentRequestEscrowToAvailableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentRequestEscrowToAvailable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentRequestEscrowToAvailable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentRequestEscrowToAvailableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentRequestEscrowToAvailableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentRequestEscrowToAvailable represents a RequestEscrowToAvailable event raised by the TaskPayment contract.
type TaskPaymentRequestEscrowToAvailable struct {
	User         common.Address
	RequestBlock *big.Int
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRequestEscrowToAvailable is a free log retrieval operation binding the contract event 0x5b8db30c5eabdf09ef70381abe76260b8a18996115f82857349aefca8d0c59d6.
//
// Solidity: event RequestEscrowToAvailable(address indexed user, uint256 requestBlock, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) FilterRequestEscrowToAvailable(opts *bind.FilterOpts, user []common.Address) (*TaskPaymentRequestEscrowToAvailableIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "RequestEscrowToAvailable", userRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentRequestEscrowToAvailableIterator{contract: _TaskPayment.contract, event: "RequestEscrowToAvailable", logs: logs, sub: sub}, nil
}

// WatchRequestEscrowToAvailable is a free log subscription operation binding the contract event 0x5b8db30c5eabdf09ef70381abe76260b8a18996115f82857349aefca8d0c59d6.
//
// Solidity: event RequestEscrowToAvailable(address indexed user, uint256 requestBlock, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) WatchRequestEscrowToAvailable(opts *bind.WatchOpts, sink chan<- *TaskPaymentRequestEscrowToAvailable, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "RequestEscrowToAvailable", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentRequestEscrowToAvailable)
				if err := _TaskPayment.contract.UnpackLog(event, "RequestEscrowToAvailable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestEscrowToAvailable is a log parse operation binding the contract event 0x5b8db30c5eabdf09ef70381abe76260b8a18996115f82857349aefca8d0c59d6.
//
// Solidity: event RequestEscrowToAvailable(address indexed user, uint256 requestBlock, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) ParseRequestEscrowToAvailable(log types.Log) (*TaskPaymentRequestEscrowToAvailable, error) {
	event := new(TaskPaymentRequestEscrowToAvailable)
	if err := _TaskPayment.contract.UnpackLog(event, "RequestEscrowToAvailable", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentTokenAddressSetIterator is returned from FilterTokenAddressSet and is used to iterate over the raw logs and unpacked data for TokenAddressSet events raised by the TaskPayment contract.
type TaskPaymentTokenAddressSetIterator struct {
	Event *TaskPaymentTokenAddressSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentTokenAddressSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentTokenAddressSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentTokenAddressSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentTokenAddressSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentTokenAddressSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentTokenAddressSet represents a TokenAddressSet event raised by the TaskPayment contract.
type TaskPaymentTokenAddressSet struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTokenAddressSet is a free log retrieval operation binding the contract event 0xd82cad5fdc98633445b90f806f2e1a61a5409f92187ee9cd87f1da18c9069266.
//
// Solidity: event TokenAddressSet(address indexed token)
func (_TaskPayment *TaskPaymentFilterer) FilterTokenAddressSet(opts *bind.FilterOpts, token []common.Address) (*TaskPaymentTokenAddressSetIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "TokenAddressSet", tokenRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentTokenAddressSetIterator{contract: _TaskPayment.contract, event: "TokenAddressSet", logs: logs, sub: sub}, nil
}

// WatchTokenAddressSet is a free log subscription operation binding the contract event 0xd82cad5fdc98633445b90f806f2e1a61a5409f92187ee9cd87f1da18c9069266.
//
// Solidity: event TokenAddressSet(address indexed token)
func (_TaskPayment *TaskPaymentFilterer) WatchTokenAddressSet(opts *bind.WatchOpts, sink chan<- *TaskPaymentTokenAddressSet, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "TokenAddressSet", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentTokenAddressSet)
				if err := _TaskPayment.contract.UnpackLog(event, "TokenAddressSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenAddressSet is a log parse operation binding the contract event 0xd82cad5fdc98633445b90f806f2e1a61a5409f92187ee9cd87f1da18c9069266.
//
// Solidity: event TokenAddressSet(address indexed token)
func (_TaskPayment *TaskPaymentFilterer) ParseTokenAddressSet(log types.Log) (*TaskPaymentTokenAddressSet, error) {
	event := new(TaskPaymentTokenAddressSet)
	if err := _TaskPayment.contract.UnpackLog(event, "TokenAddressSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentTransferToCPBeneficiaryIterator is returned from FilterTransferToCPBeneficiary and is used to iterate over the raw logs and unpacked data for TransferToCPBeneficiary events raised by the TaskPayment contract.
type TaskPaymentTransferToCPBeneficiaryIterator struct {
	Event *TaskPaymentTransferToCPBeneficiary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentTransferToCPBeneficiaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentTransferToCPBeneficiary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentTransferToCPBeneficiary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentTransferToCPBeneficiaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentTransferToCPBeneficiaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentTransferToCPBeneficiary represents a TransferToCPBeneficiary event raised by the TaskPayment contract.
type TaskPaymentTransferToCPBeneficiary struct {
	TaskUUID       string
	Account        common.Address
	CpAccount      common.Address
	Beneficiary    common.Address
	TransferAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTransferToCPBeneficiary is a free log retrieval operation binding the contract event 0x1afb519921fbc0153fa9ae324dd48abc4017b4d5285bb3c97f4018ec0965173c.
//
// Solidity: event TransferToCPBeneficiary(string taskUUID, address account, address indexed cpAccount, address beneficiary, uint256 transferAmount)
func (_TaskPayment *TaskPaymentFilterer) FilterTransferToCPBeneficiary(opts *bind.FilterOpts, cpAccount []common.Address) (*TaskPaymentTransferToCPBeneficiaryIterator, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "TransferToCPBeneficiary", cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentTransferToCPBeneficiaryIterator{contract: _TaskPayment.contract, event: "TransferToCPBeneficiary", logs: logs, sub: sub}, nil
}

// WatchTransferToCPBeneficiary is a free log subscription operation binding the contract event 0x1afb519921fbc0153fa9ae324dd48abc4017b4d5285bb3c97f4018ec0965173c.
//
// Solidity: event TransferToCPBeneficiary(string taskUUID, address account, address indexed cpAccount, address beneficiary, uint256 transferAmount)
func (_TaskPayment *TaskPaymentFilterer) WatchTransferToCPBeneficiary(opts *bind.WatchOpts, sink chan<- *TaskPaymentTransferToCPBeneficiary, cpAccount []common.Address) (event.Subscription, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "TransferToCPBeneficiary", cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentTransferToCPBeneficiary)
				if err := _TaskPayment.contract.UnpackLog(event, "TransferToCPBeneficiary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferToCPBeneficiary is a log parse operation binding the contract event 0x1afb519921fbc0153fa9ae324dd48abc4017b4d5285bb3c97f4018ec0965173c.
//
// Solidity: event TransferToCPBeneficiary(string taskUUID, address account, address indexed cpAccount, address beneficiary, uint256 transferAmount)
func (_TaskPayment *TaskPaymentFilterer) ParseTransferToCPBeneficiary(log types.Log) (*TaskPaymentTransferToCPBeneficiary, error) {
	event := new(TaskPaymentTransferToCPBeneficiary)
	if err := _TaskPayment.contract.UnpackLog(event, "TransferToCPBeneficiary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentTransferToPlatformIterator is returned from FilterTransferToPlatform and is used to iterate over the raw logs and unpacked data for TransferToPlatform events raised by the TaskPayment contract.
type TaskPaymentTransferToPlatformIterator struct {
	Event *TaskPaymentTransferToPlatform // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentTransferToPlatformIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentTransferToPlatform)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentTransferToPlatform)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentTransferToPlatformIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentTransferToPlatformIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentTransferToPlatform represents a TransferToPlatform event raised by the TaskPayment contract.
type TaskPaymentTransferToPlatform struct {
	Account         common.Address
	PlatformWallet  common.Address
	RealPlatformFee *big.Int
	PlatformFee     *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterTransferToPlatform is a free log retrieval operation binding the contract event 0x41a47e17913f31a7296c4ed86149dea9e40d822378cbdae4532779bd7ebb7e49.
//
// Solidity: event TransferToPlatform(address account, address platformWallet, uint256 realPlatformFee, uint256 platformFee)
func (_TaskPayment *TaskPaymentFilterer) FilterTransferToPlatform(opts *bind.FilterOpts) (*TaskPaymentTransferToPlatformIterator, error) {

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "TransferToPlatform")
	if err != nil {
		return nil, err
	}
	return &TaskPaymentTransferToPlatformIterator{contract: _TaskPayment.contract, event: "TransferToPlatform", logs: logs, sub: sub}, nil
}

// WatchTransferToPlatform is a free log subscription operation binding the contract event 0x41a47e17913f31a7296c4ed86149dea9e40d822378cbdae4532779bd7ebb7e49.
//
// Solidity: event TransferToPlatform(address account, address platformWallet, uint256 realPlatformFee, uint256 platformFee)
func (_TaskPayment *TaskPaymentFilterer) WatchTransferToPlatform(opts *bind.WatchOpts, sink chan<- *TaskPaymentTransferToPlatform) (event.Subscription, error) {

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "TransferToPlatform")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentTransferToPlatform)
				if err := _TaskPayment.contract.UnpackLog(event, "TransferToPlatform", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferToPlatform is a log parse operation binding the contract event 0x41a47e17913f31a7296c4ed86149dea9e40d822378cbdae4532779bd7ebb7e49.
//
// Solidity: event TransferToPlatform(address account, address platformWallet, uint256 realPlatformFee, uint256 platformFee)
func (_TaskPayment *TaskPaymentFilterer) ParseTransferToPlatform(log types.Log) (*TaskPaymentTransferToPlatform, error) {
	event := new(TaskPaymentTransferToPlatform)
	if err := _TaskPayment.contract.UnpackLog(event, "TransferToPlatform", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the TaskPayment contract.
type TaskPaymentWithdrawalIterator struct {
	Event *TaskPaymentWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentWithdrawal represents a Withdrawal event raised by the TaskPayment contract.
type TaskPaymentWithdrawal struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) FilterWithdrawal(opts *bind.FilterOpts, account []common.Address) (*TaskPaymentWithdrawalIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "Withdrawal", accountRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentWithdrawalIterator{contract: _TaskPayment.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *TaskPaymentWithdrawal, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "Withdrawal", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentWithdrawal)
				if err := _TaskPayment.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) ParseWithdrawal(log types.Log) (*TaskPaymentWithdrawal, error) {
	event := new(TaskPaymentWithdrawal)
	if err := _TaskPayment.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskPaymentTransferedToEscrowIterator is returned from FilterTransferedToEscrow and is used to iterate over the raw logs and unpacked data for TransferedToEscrow events raised by the TaskPayment contract.
type TaskPaymentTransferedToEscrowIterator struct {
	Event *TaskPaymentTransferedToEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskPaymentTransferedToEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskPaymentTransferedToEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskPaymentTransferedToEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskPaymentTransferedToEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskPaymentTransferedToEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskPaymentTransferedToEscrow represents a TransferedToEscrow event raised by the TaskPayment contract.
type TaskPaymentTransferedToEscrow struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransferedToEscrow is a free log retrieval operation binding the contract event 0xdf7545b95b22b9faf026be7aaf1b3bc7b83e6e9d72b32281a6e3645fb381f5d3.
//
// Solidity: event transferedToEscrow(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) FilterTransferedToEscrow(opts *bind.FilterOpts, account []common.Address) (*TaskPaymentTransferedToEscrowIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _TaskPayment.contract.FilterLogs(opts, "transferedToEscrow", accountRule)
	if err != nil {
		return nil, err
	}
	return &TaskPaymentTransferedToEscrowIterator{contract: _TaskPayment.contract, event: "transferedToEscrow", logs: logs, sub: sub}, nil
}

// WatchTransferedToEscrow is a free log subscription operation binding the contract event 0xdf7545b95b22b9faf026be7aaf1b3bc7b83e6e9d72b32281a6e3645fb381f5d3.
//
// Solidity: event transferedToEscrow(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) WatchTransferedToEscrow(opts *bind.WatchOpts, sink chan<- *TaskPaymentTransferedToEscrow, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _TaskPayment.contract.WatchLogs(opts, "transferedToEscrow", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskPaymentTransferedToEscrow)
				if err := _TaskPayment.contract.UnpackLog(event, "transferedToEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferedToEscrow is a log parse operation binding the contract event 0xdf7545b95b22b9faf026be7aaf1b3bc7b83e6e9d72b32281a6e3645fb381f5d3.
//
// Solidity: event transferedToEscrow(address indexed account, uint256 amount)
func (_TaskPayment *TaskPaymentFilterer) ParseTransferedToEscrow(log types.Log) (*TaskPaymentTransferedToEscrow, error) {
	event := new(TaskPaymentTransferedToEscrow)
	if err := _TaskPayment.contract.UnpackLog(event, "transferedToEscrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
