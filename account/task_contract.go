// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package account

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ECPTaskTaskInfo is an auto generated low-level Go binding around an user-defined struct.
type ECPTaskTaskInfo struct {
	TaskType          *big.Int
	ResourceType      *big.Int
	InputParam        string
	VerifyParam       string
	CpContractAddress common.Address
	Status            string
	RewardTx          string
	Proof             string
	ChallengeTx       string
	LockFundTx        string
	UnlockFundTx      string
	SlashTx           string
	Deadline          *big.Int
	IsSubmitted       bool
	IsChallenged      bool
}

// TaskMetaData contains all meta data concerning the Task contract.
var TaskMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resourceType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_inputParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_verifyParam\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cpContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lockFundTx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"challengeTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"ChallengeAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lockFundTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"LockAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rewardTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"RewardAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slashTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"SlashAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"SubmitProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"unlockFundTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"UnlockAndStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"challengeTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cpContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"verifyParam\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"cpContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"challengeTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unlockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"slashTx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubmitted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isChallenged\",\"type\":\"bool\"}],\"internalType\":\"structECPTask.TaskInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputParam\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChallenged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFundTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFundTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_challengeTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateChallengeAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateLockAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_rewardTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateRewardAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_slashTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateSlashAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unlockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateUnlockAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyParam\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620031c0380380620031c08339818101604052810190620000379190620004ba565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000610565b60405180910390fd5b620000be81620001c360201b60201c565b5087600181905550866002819055508560039081620000de91906200086e565b508460049081620000f091906200086e565b5083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600690816200014391906200086e565b5080600d8190555081600a90816200015c91906200086e565b506001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050505062000955565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620002b0816200029b565b8114620002bc57600080fd5b50565b600081519050620002d081620002a5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032b82620002e0565b810181811067ffffffffffffffff821117156200034d576200034c620002f1565b5b80604052505050565b60006200036262000287565b905062000370828262000320565b919050565b600067ffffffffffffffff821115620003935762000392620002f1565b5b6200039e82620002e0565b9050602081019050919050565b60005b83811015620003cb578082015181840152602081019050620003ae565b60008484015250505050565b6000620003ee620003e88462000375565b62000356565b9050828152602081018484840111156200040d576200040c620002db565b5b6200041a848285620003ab565b509392505050565b600082601f8301126200043a5762000439620002d6565b5b81516200044c848260208601620003d7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004828262000455565b9050919050565b620004948162000475565b8114620004a057600080fd5b50565b600081519050620004b48162000489565b92915050565b600080600080600080600080610100898b031215620004de57620004dd62000291565b5b6000620004ee8b828c01620002bf565b9850506020620005018b828c01620002bf565b975050604089015167ffffffffffffffff81111562000525576200052462000296565b5b620005338b828c0162000422565b965050606089015167ffffffffffffffff81111562000557576200055662000296565b5b620005658b828c0162000422565b9550506080620005788b828c01620004a3565b94505060a089015167ffffffffffffffff8111156200059c576200059b62000296565b5b620005aa8b828c0162000422565b93505060c089015167ffffffffffffffff811115620005ce57620005cd62000296565b5b620005dc8b828c0162000422565b92505060e0620005ef8b828c01620002bf565b9150509295985092959890939650565b6200060a8162000475565b82525050565b6000602082019050620006276000830184620005ff565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200068057607f821691505b60208210810362000696576200069562000638565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006c1565b6200070c8683620006c1565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200074f6200074962000743846200029b565b62000724565b6200029b565b9050919050565b6000819050919050565b6200076b836200072e565b620007836200077a8262000756565b848454620006ce565b825550505050565b600090565b6200079a6200078b565b620007a781848462000760565b505050565b5b81811015620007cf57620007c360008262000790565b600181019050620007ad565b5050565b601f8211156200081e57620007e8816200069c565b620007f384620006b1565b8101602085101562000803578190505b6200081b6200081285620006b1565b830182620007ac565b50505b505050565b600082821c905092915050565b6000620008436000198460080262000823565b1980831691505092915050565b60006200085e838362000830565b9150826002028217905092915050565b62000879826200062d565b67ffffffffffffffff811115620008955762000894620002f1565b5b620008a1825462000667565b620008ae828285620007d3565b600060209050601f831160018114620008e65760008415620008d1578287015190505b620008dd858262000850565b8655506200094d565b601f198416620008f6866200069c565b60005b828110156200092057848901518255600182019150602085019450602081019050620008f9565b868310156200094057848901516200093c601f89168262000830565b8355505b6001600288020188555050505b505050505050565b61285b80620009656000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638cf6f32c116100f9578063e488168811610097578063f7d2219011610071578063f7d2219014610450578063f80cb18a1461046e578063faf924cf1461048c578063fe140e63146104aa576101a9565b8063e4881688146103f8578063ec218dc414610416578063f2fde38b14610434576101a9565b80639df4d0fe116100d35780639df4d0fe14610384578063b07d7f52146103a2578063b0a40371146103be578063bac64a2e146103da576101a9565b80638cf6f32c1461032a5780638da5cb5b1461034857806392395dc514610366576101a9565b8063497153e31161016657806354fd4d501161014057806354fd4d50146102c85780636b24e930146102e6578063715018a614610302578063741b87901461030c576101a9565b8063497153e3146102705780634ad45b321461028e5780634dc17e58146102aa576101a9565b80631382fe66146101ae578063200d2ed2146101ca57806324d7806c146101e857806329dcb0cf146102185780632c2e8faf146102365780632cae8b1014610252575b600080fd5b6101c860048036038101906101c39190611cc4565b6104c8565b005b6101d26105b3565b6040516101df9190611dbb565b60405180910390f35b61020260048036038101906101fd9190611e3b565b610641565b60405161020f9190611e83565b60405180910390f35b610220610661565b60405161022d9190611eb7565b60405180910390f35b610250600480360381019061024b9190611ed2565b610667565b005b61025a610a4d565b6040516102679190611dbb565b60405180910390f35b610278610adb565b6040516102859190611dbb565b60405180910390f35b6102a860048036038101906102a39190611cc4565b610b69565b005b6102b2610c54565b6040516102bf9190611dbb565b60405180910390f35b6102d0610ce2565b6040516102dd9190611dbb565b60405180910390f35b61030060048036038101906102fb9190611cc4565b610d1f565b005b61030a610e25565b005b610314610e39565b6040516103219190611e83565b60405180910390f35b610332610e4c565b60405161033f9190611eb7565b60405180910390f35b610350610e52565b60405161035d9190611f2a565b60405180910390f35b61036e610e7b565b60405161037b9190611f2a565b60405180910390f35b61038c610ea1565b6040516103999190611e83565b60405180910390f35b6103bc60048036038101906103b79190611cc4565b610eb4565b005b6103d860048036038101906103d39190611cc4565b610f9f565b005b6103e261108a565b6040516103ef9190612137565b60405180910390f35b610400611635565b60405161040d9190611dbb565b60405180910390f35b61041e6116c3565b60405161042b9190611dbb565b60405180910390f35b61044e60048036038101906104499190611e3b565b611751565b005b6104586117d7565b6040516104659190611eb7565b60405180910390f35b6104766117dd565b6040516104839190611dbb565b60405180910390f35b61049461186b565b6040516104a19190611dbb565b60405180910390f35b6104b26118f9565b6040516104bf9190611dbb565b60405180910390f35b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b906121cb565b60405180910390fd5b81600c908161056391906123f7565b50806006908161057391906123f7565b507f14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f600c60066040516105a792919061254d565b60405180910390a15050565b600680546105c09061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec9061221a565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b505050505081565b600f6020528060005260406000206000915054906101000a900460ff1681565b600d5481565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f893d20e8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161073391906125cb565b6000604051808303816000865af19150503d8060008114610770576040519150601f19603f3d011682016040523d82523d6000602084013e610775565b606091505b5091509150816107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b190612654565b60405180910390fd5b6000818060200190518101906107d091906126b2565b9050600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f67eaeddb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161089e91906125cb565b6000604051808303816000865af19150503d80600081146108db576040519150601f19603f3d011682016040523d82523d6000602084013e6108e0565b606091505b509150915081610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c90612751565b60405180910390fd5b60008180602001905181019061093b91906126b2565b90508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109a257508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906127e3565b60405180910390fd5b86600890816109f091906123f7565b506001600e60006101000a81548160ff0219169083151502179055507f67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f6008604051610a3c9190612803565b60405180910390a150505050505050565b60078054610a5a9061221a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a869061221a565b8015610ad35780601f10610aa857610100808354040283529160200191610ad3565b820191906000526020600020905b815481529060010190602001808311610ab657829003601f168201915b505050505081565b60048054610ae89061221a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b149061221a565b8015610b615780601f10610b3657610100808354040283529160200191610b61565b820191906000526020600020905b815481529060010190602001808311610b4457829003601f168201915b505050505081565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bec906121cb565b60405180910390fd5b81600a9081610c0491906123f7565b508060069081610c1491906123f7565b507feb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2600a6006604051610c4892919061254d565b60405180910390a15050565b600c8054610c619061221a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8d9061221a565b8015610cda5780601f10610caf57610100808354040283529160200191610cda565b820191906000526020600020905b815481529060010190602001808311610cbd57829003601f168201915b505050505081565b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da2906121cb565b60405180910390fd5b8160099081610dba91906123f7565b508060069081610dca91906123f7565b506001600e60016101000a81548160ff0219169083151502179055507f37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f560096006604051610e1992919061254d565b60405180910390a15050565b610e2d611987565b610e376000611a0e565b565b600e60009054906101000a900460ff1681565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f37906121cb565b60405180910390fd5b8160079081610f4f91906123f7565b508060069081610f5f91906123f7565b507f6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f60076006604051610f9392919061254d565b60405180910390a15050565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661102b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611022906121cb565b60405180910390fd5b81600b908161103a91906123f7565b50806006908161104a91906123f7565b507fa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa600b600660405161107e92919061254d565b60405180910390a15050565b611092611ada565b604051806101e0016040528060015481526020016002548152602001600380546110bb9061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546110e79061221a565b80156111345780601f1061110957610100808354040283529160200191611134565b820191906000526020600020905b81548152906001019060200180831161111757829003601f168201915b505050505081526020016004805461114b9061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546111779061221a565b80156111c45780601f10611199576101008083540402835291602001916111c4565b820191906000526020600020905b8154815290600101906020018083116111a757829003601f168201915b50505050508152602001600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600680546112199061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546112459061221a565b80156112925780601f1061126757610100808354040283529160200191611292565b820191906000526020600020905b81548152906001019060200180831161127557829003601f168201915b50505050508152602001600780546112a99061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546112d59061221a565b80156113225780601f106112f757610100808354040283529160200191611322565b820191906000526020600020905b81548152906001019060200180831161130557829003601f168201915b50505050508152602001600880546113399061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546113659061221a565b80156113b25780601f10611387576101008083540402835291602001916113b2565b820191906000526020600020905b81548152906001019060200180831161139557829003601f168201915b50505050508152602001600980546113c99061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546113f59061221a565b80156114425780601f1061141757610100808354040283529160200191611442565b820191906000526020600020905b81548152906001019060200180831161142557829003601f168201915b50505050508152602001600a80546114599061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546114859061221a565b80156114d25780601f106114a7576101008083540402835291602001916114d2565b820191906000526020600020905b8154815290600101906020018083116114b557829003601f168201915b50505050508152602001600b80546114e99061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546115159061221a565b80156115625780601f1061153757610100808354040283529160200191611562565b820191906000526020600020905b81548152906001019060200180831161154557829003601f168201915b50505050508152602001600c80546115799061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546115a59061221a565b80156115f25780601f106115c7576101008083540402835291602001916115f2565b820191906000526020600020905b8154815290600101906020018083116115d557829003601f168201915b50505050508152602001600d548152602001600e60009054906101000a900460ff1615158152602001600e60019054906101000a900460ff161515815250905090565b600980546116429061221a565b80601f016020809104026020016040519081016040528092919081815260200182805461166e9061221a565b80156116bb5780601f10611690576101008083540402835291602001916116bb565b820191906000526020600020905b81548152906001019060200180831161169e57829003601f168201915b505050505081565b600b80546116d09061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546116fc9061221a565b80156117495780601f1061171e57610100808354040283529160200191611749565b820191906000526020600020905b81548152906001019060200180831161172c57829003601f168201915b505050505081565b611759611987565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117cb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117c29190611f2a565b60405180910390fd5b6117d481611a0e565b50565b60025481565b600a80546117ea9061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546118169061221a565b80156118635780601f1061183857610100808354040283529160200191611863565b820191906000526020600020905b81548152906001019060200180831161184657829003601f168201915b505050505081565b600880546118789061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546118a49061221a565b80156118f15780601f106118c6576101008083540402835291602001916118f1565b820191906000526020600020905b8154815290600101906020018083116118d457829003601f168201915b505050505081565b600380546119069061221a565b80601f01602080910402602001604051908101604052809291908181526020018280546119329061221a565b801561197f5780601f106119545761010080835404028352916020019161197f565b820191906000526020600020905b81548152906001019060200180831161196257829003601f168201915b505050505081565b61198f611ad2565b73ffffffffffffffffffffffffffffffffffffffff166119ad610e52565b73ffffffffffffffffffffffffffffffffffffffff1614611a0c576119d0611ad2565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a039190611f2a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806101e0016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001600081526020016000151581526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bd182611b88565b810181811067ffffffffffffffff82111715611bf057611bef611b99565b5b80604052505050565b6000611c03611b6a565b9050611c0f8282611bc8565b919050565b600067ffffffffffffffff821115611c2f57611c2e611b99565b5b611c3882611b88565b9050602081019050919050565b82818337600083830152505050565b6000611c67611c6284611c14565b611bf9565b905082815260208101848484011115611c8357611c82611b83565b5b611c8e848285611c45565b509392505050565b600082601f830112611cab57611caa611b7e565b5b8135611cbb848260208601611c54565b91505092915050565b60008060408385031215611cdb57611cda611b74565b5b600083013567ffffffffffffffff811115611cf957611cf8611b79565b5b611d0585828601611c96565b925050602083013567ffffffffffffffff811115611d2657611d25611b79565b5b611d3285828601611c96565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d76578082015181840152602081019050611d5b565b60008484015250505050565b6000611d8d82611d3c565b611d978185611d47565b9350611da7818560208601611d58565b611db081611b88565b840191505092915050565b60006020820190508181036000830152611dd58184611d82565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e0882611ddd565b9050919050565b611e1881611dfd565b8114611e2357600080fd5b50565b600081359050611e3581611e0f565b92915050565b600060208284031215611e5157611e50611b74565b5b6000611e5f84828501611e26565b91505092915050565b60008115159050919050565b611e7d81611e68565b82525050565b6000602082019050611e986000830184611e74565b92915050565b6000819050919050565b611eb181611e9e565b82525050565b6000602082019050611ecc6000830184611ea8565b92915050565b600060208284031215611ee857611ee7611b74565b5b600082013567ffffffffffffffff811115611f0657611f05611b79565b5b611f1284828501611c96565b91505092915050565b611f2481611dfd565b82525050565b6000602082019050611f3f6000830184611f1b565b92915050565b611f4e81611e9e565b82525050565b600082825260208201905092915050565b6000611f7082611d3c565b611f7a8185611f54565b9350611f8a818560208601611d58565b611f9381611b88565b840191505092915050565b611fa781611dfd565b82525050565b611fb681611e68565b82525050565b60006101e083016000830151611fd56000860182611f45565b506020830151611fe86020860182611f45565b50604083015184820360408601526120008282611f65565b9150506060830151848203606086015261201a8282611f65565b915050608083015161202f6080860182611f9e565b5060a083015184820360a08601526120478282611f65565b91505060c083015184820360c08601526120618282611f65565b91505060e083015184820360e086015261207b8282611f65565b9150506101008301518482036101008601526120978282611f65565b9150506101208301518482036101208601526120b38282611f65565b9150506101408301518482036101408601526120cf8282611f65565b9150506101608301518482036101608601526120eb8282611f65565b915050610180830151612102610180860182611f45565b506101a08301516121176101a0860182611fad565b506101c083015161212c6101c0860182611fad565b508091505092915050565b600060208201905081810360008301526121518184611fbc565b905092915050565b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b60006121b5602683611d47565b91506121c082612159565b604082019050919050565b600060208201905081810360008301526121e4816121a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061223257607f821691505b602082108103612245576122446121eb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026122ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612270565b6122b78683612270565b95508019841693508086168417925050509392505050565b6000819050919050565b60006122f46122ef6122ea84611e9e565b6122cf565b611e9e565b9050919050565b6000819050919050565b61230e836122d9565b61232261231a826122fb565b84845461227d565b825550505050565b600090565b61233761232a565b612342818484612305565b505050565b5b818110156123665761235b60008261232f565b600181019050612348565b5050565b601f8211156123ab5761237c8161224b565b61238584612260565b81016020851015612394578190505b6123a86123a085612260565b830182612347565b50505b505050565b600082821c905092915050565b60006123ce600019846008026123b0565b1980831691505092915050565b60006123e783836123bd565b9150826002028217905092915050565b61240082611d3c565b67ffffffffffffffff81111561241957612418611b99565b5b612423825461221a565b61242e82828561236a565b600060209050601f831160018114612461576000841561244f578287015190505b61245985826123db565b8655506124c1565b601f19841661246f8661224b565b60005b8281101561249757848901518255600182019150602085019450602081019050612472565b868310156124b457848901516124b0601f8916826123bd565b8355505b6001600288020188555050505b505050505050565b600081546124d68161221a565b6124e08186611d47565b945060018216600081146124fb576001811461251157612544565b60ff198316865281151560200286019350612544565b61251a8561224b565b60005b8381101561253c5781548189015260018201915060208101905061251d565b808801955050505b50505092915050565b6000604082019050818103600083015261256781856124c9565b9050818103602083015261257b81846124c9565b90509392505050565b600081519050919050565b600081905092915050565b60006125a582612584565b6125af818561258f565b93506125bf818560208601611d58565b80840191505092915050565b60006125d7828461259a565b915081905092915050565b7f4661696c656420746f2063616c6c206765744f776e65722066756e6374696f6e60008201527f206f662043504163636f756e7400000000000000000000000000000000000000602082015250565b600061263e602d83611d47565b9150612649826125e2565b604082019050919050565b6000602082019050818103600083015261266d81612631565b9050919050565b600061267f82611ddd565b9050919050565b61268f81612674565b811461269a57600080fd5b50565b6000815190506126ac81612686565b92915050565b6000602082840312156126c8576126c7611b74565b5b60006126d68482850161269d565b91505092915050565b7f4661696c656420746f2063616c6c20676574576f726b65722066756e6374696f60008201527f6e206f662043504163636f756e74000000000000000000000000000000000000602082015250565b600061273b602e83611d47565b9150612746826126df565b604082019050919050565b6000602082019050818103600083015261276a8161272e565b9050919050565b7f4f6e6c792074686520435020636f6e7472616374206f776e6572206f7220776f60008201527f726b65722063616e207375626d69742070726f6f662e00000000000000000000602082015250565b60006127cd603683611d47565b91506127d882612771565b604082019050919050565b600060208201905081810360008301526127fc816127c0565b9050919050565b6000602082019050818103600083015261281d81846124c9565b90509291505056fea2646970667358221220d0966c31b5193ac175b74f19a6b973b3cb89324caba3a96b192c05ef1babba0364736f6c63430008140033",
}

// TaskABI is the input ABI used to generate the binding from.
// Deprecated: Use TaskMetaData.ABI instead.
var TaskABI = TaskMetaData.ABI

// TaskBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TaskMetaData.Bin instead.
var TaskBin = TaskMetaData.Bin

// DeployTask deploys a new Ethereum contract, binding an instance of Task to it.
func DeployTask(auth *bind.TransactOpts, backend bind.ContractBackend, _taskType *big.Int, _resourceType *big.Int, _inputParam string, _verifyParam string, _cpContractAddress common.Address, _status string, _lockFundTx string, _deadline *big.Int) (common.Address, *types.Transaction, *Task, error) {
	parsed, err := TaskMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TaskBin), backend, _taskType, _resourceType, _inputParam, _verifyParam, _cpContractAddress, _status, _lockFundTx, _deadline)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Task{TaskCaller: TaskCaller{contract: contract}, TaskTransactor: TaskTransactor{contract: contract}, TaskFilterer: TaskFilterer{contract: contract}}, nil
}

// Task is an auto generated Go binding around an Ethereum contract.
type Task struct {
	TaskCaller     // Read-only binding to the contract
	TaskTransactor // Write-only binding to the contract
	TaskFilterer   // Log filterer for contract events
}

// TaskCaller is an auto generated read-only Go binding around an Ethereum contract.
type TaskCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TaskTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TaskFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TaskSession struct {
	Contract     *Task             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TaskCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TaskCallerSession struct {
	Contract *TaskCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TaskTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TaskTransactorSession struct {
	Contract     *TaskTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TaskRaw is an auto generated low-level Go binding around an Ethereum contract.
type TaskRaw struct {
	Contract *Task // Generic contract binding to access the raw methods on
}

// TaskCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TaskCallerRaw struct {
	Contract *TaskCaller // Generic read-only contract binding to access the raw methods on
}

// TaskTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TaskTransactorRaw struct {
	Contract *TaskTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTask creates a new instance of Task, bound to a specific deployed contract.
func NewTask(address common.Address, backend bind.ContractBackend) (*Task, error) {
	contract, err := bindTask(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Task{TaskCaller: TaskCaller{contract: contract}, TaskTransactor: TaskTransactor{contract: contract}, TaskFilterer: TaskFilterer{contract: contract}}, nil
}

// NewTaskCaller creates a new read-only instance of Task, bound to a specific deployed contract.
func NewTaskCaller(address common.Address, caller bind.ContractCaller) (*TaskCaller, error) {
	contract, err := bindTask(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TaskCaller{contract: contract}, nil
}

// NewTaskTransactor creates a new write-only instance of Task, bound to a specific deployed contract.
func NewTaskTransactor(address common.Address, transactor bind.ContractTransactor) (*TaskTransactor, error) {
	contract, err := bindTask(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TaskTransactor{contract: contract}, nil
}

// NewTaskFilterer creates a new log filterer instance of Task, bound to a specific deployed contract.
func NewTaskFilterer(address common.Address, filterer bind.ContractFilterer) (*TaskFilterer, error) {
	contract, err := bindTask(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TaskFilterer{contract: contract}, nil
}

// bindTask binds a generic wrapper to an already deployed contract.
func bindTask(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TaskMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Task *TaskRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Task.Contract.TaskCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Task *TaskRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Task.Contract.TaskTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Task *TaskRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Task.Contract.TaskTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Task *TaskCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Task.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Task *TaskTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Task.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Task *TaskTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Task.Contract.contract.Transact(opts, method, params...)
}

// ChallengeTx is a free data retrieval call binding the contract method 0xe4881688.
//
// Solidity: function challengeTx() view returns(string)
func (_Task *TaskCaller) ChallengeTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "challengeTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ChallengeTx is a free data retrieval call binding the contract method 0xe4881688.
//
// Solidity: function challengeTx() view returns(string)
func (_Task *TaskSession) ChallengeTx() (string, error) {
	return _Task.Contract.ChallengeTx(&_Task.CallOpts)
}

// ChallengeTx is a free data retrieval call binding the contract method 0xe4881688.
//
// Solidity: function challengeTx() view returns(string)
func (_Task *TaskCallerSession) ChallengeTx() (string, error) {
	return _Task.Contract.ChallengeTx(&_Task.CallOpts)
}

// CpContractAddress is a free data retrieval call binding the contract method 0x92395dc5.
//
// Solidity: function cpContractAddress() view returns(address)
func (_Task *TaskCaller) CpContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "cpContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CpContractAddress is a free data retrieval call binding the contract method 0x92395dc5.
//
// Solidity: function cpContractAddress() view returns(address)
func (_Task *TaskSession) CpContractAddress() (common.Address, error) {
	return _Task.Contract.CpContractAddress(&_Task.CallOpts)
}

// CpContractAddress is a free data retrieval call binding the contract method 0x92395dc5.
//
// Solidity: function cpContractAddress() view returns(address)
func (_Task *TaskCallerSession) CpContractAddress() (common.Address, error) {
	return _Task.Contract.CpContractAddress(&_Task.CallOpts)
}

// Deadline is a free data retrieval call binding the contract method 0x29dcb0cf.
//
// Solidity: function deadline() view returns(uint256)
func (_Task *TaskCaller) Deadline(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "deadline")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deadline is a free data retrieval call binding the contract method 0x29dcb0cf.
//
// Solidity: function deadline() view returns(uint256)
func (_Task *TaskSession) Deadline() (*big.Int, error) {
	return _Task.Contract.Deadline(&_Task.CallOpts)
}

// Deadline is a free data retrieval call binding the contract method 0x29dcb0cf.
//
// Solidity: function deadline() view returns(uint256)
func (_Task *TaskCallerSession) Deadline() (*big.Int, error) {
	return _Task.Contract.Deadline(&_Task.CallOpts)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0xbac64a2e.
//
// Solidity: function getTaskInfo() view returns((uint256,uint256,string,string,address,string,string,string,string,string,string,string,uint256,bool,bool))
func (_Task *TaskCaller) GetTaskInfo(opts *bind.CallOpts) (ECPTaskTaskInfo, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "getTaskInfo")

	if err != nil {
		return *new(ECPTaskTaskInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ECPTaskTaskInfo)).(*ECPTaskTaskInfo)

	return out0, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0xbac64a2e.
//
// Solidity: function getTaskInfo() view returns((uint256,uint256,string,string,address,string,string,string,string,string,string,string,uint256,bool,bool))
func (_Task *TaskSession) GetTaskInfo() (ECPTaskTaskInfo, error) {
	return _Task.Contract.GetTaskInfo(&_Task.CallOpts)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0xbac64a2e.
//
// Solidity: function getTaskInfo() view returns((uint256,uint256,string,string,address,string,string,string,string,string,string,string,uint256,bool,bool))
func (_Task *TaskCallerSession) GetTaskInfo() (ECPTaskTaskInfo, error) {
	return _Task.Contract.GetTaskInfo(&_Task.CallOpts)
}

// InputParam is a free data retrieval call binding the contract method 0xfe140e63.
//
// Solidity: function inputParam() view returns(string)
func (_Task *TaskCaller) InputParam(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "inputParam")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// InputParam is a free data retrieval call binding the contract method 0xfe140e63.
//
// Solidity: function inputParam() view returns(string)
func (_Task *TaskSession) InputParam() (string, error) {
	return _Task.Contract.InputParam(&_Task.CallOpts)
}

// InputParam is a free data retrieval call binding the contract method 0xfe140e63.
//
// Solidity: function inputParam() view returns(string)
func (_Task *TaskCallerSession) InputParam() (string, error) {
	return _Task.Contract.InputParam(&_Task.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_Task *TaskCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_Task *TaskSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _Task.Contract.IsAdmin(&_Task.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_Task *TaskCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _Task.Contract.IsAdmin(&_Task.CallOpts, arg0)
}

// IsChallenged is a free data retrieval call binding the contract method 0x9df4d0fe.
//
// Solidity: function isChallenged() view returns(bool)
func (_Task *TaskCaller) IsChallenged(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "isChallenged")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChallenged is a free data retrieval call binding the contract method 0x9df4d0fe.
//
// Solidity: function isChallenged() view returns(bool)
func (_Task *TaskSession) IsChallenged() (bool, error) {
	return _Task.Contract.IsChallenged(&_Task.CallOpts)
}

// IsChallenged is a free data retrieval call binding the contract method 0x9df4d0fe.
//
// Solidity: function isChallenged() view returns(bool)
func (_Task *TaskCallerSession) IsChallenged() (bool, error) {
	return _Task.Contract.IsChallenged(&_Task.CallOpts)
}

// IsSubmitted is a free data retrieval call binding the contract method 0x741b8790.
//
// Solidity: function isSubmitted() view returns(bool)
func (_Task *TaskCaller) IsSubmitted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "isSubmitted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSubmitted is a free data retrieval call binding the contract method 0x741b8790.
//
// Solidity: function isSubmitted() view returns(bool)
func (_Task *TaskSession) IsSubmitted() (bool, error) {
	return _Task.Contract.IsSubmitted(&_Task.CallOpts)
}

// IsSubmitted is a free data retrieval call binding the contract method 0x741b8790.
//
// Solidity: function isSubmitted() view returns(bool)
func (_Task *TaskCallerSession) IsSubmitted() (bool, error) {
	return _Task.Contract.IsSubmitted(&_Task.CallOpts)
}

// LockFundTx is a free data retrieval call binding the contract method 0xf80cb18a.
//
// Solidity: function lockFundTx() view returns(string)
func (_Task *TaskCaller) LockFundTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "lockFundTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LockFundTx is a free data retrieval call binding the contract method 0xf80cb18a.
//
// Solidity: function lockFundTx() view returns(string)
func (_Task *TaskSession) LockFundTx() (string, error) {
	return _Task.Contract.LockFundTx(&_Task.CallOpts)
}

// LockFundTx is a free data retrieval call binding the contract method 0xf80cb18a.
//
// Solidity: function lockFundTx() view returns(string)
func (_Task *TaskCallerSession) LockFundTx() (string, error) {
	return _Task.Contract.LockFundTx(&_Task.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Task *TaskCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Task *TaskSession) Owner() (common.Address, error) {
	return _Task.Contract.Owner(&_Task.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Task *TaskCallerSession) Owner() (common.Address, error) {
	return _Task.Contract.Owner(&_Task.CallOpts)
}

// Proof is a free data retrieval call binding the contract method 0xfaf924cf.
//
// Solidity: function proof() view returns(string)
func (_Task *TaskCaller) Proof(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "proof")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Proof is a free data retrieval call binding the contract method 0xfaf924cf.
//
// Solidity: function proof() view returns(string)
func (_Task *TaskSession) Proof() (string, error) {
	return _Task.Contract.Proof(&_Task.CallOpts)
}

// Proof is a free data retrieval call binding the contract method 0xfaf924cf.
//
// Solidity: function proof() view returns(string)
func (_Task *TaskCallerSession) Proof() (string, error) {
	return _Task.Contract.Proof(&_Task.CallOpts)
}

// ResourceType is a free data retrieval call binding the contract method 0xf7d22190.
//
// Solidity: function resourceType() view returns(uint256)
func (_Task *TaskCaller) ResourceType(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "resourceType")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ResourceType is a free data retrieval call binding the contract method 0xf7d22190.
//
// Solidity: function resourceType() view returns(uint256)
func (_Task *TaskSession) ResourceType() (*big.Int, error) {
	return _Task.Contract.ResourceType(&_Task.CallOpts)
}

// ResourceType is a free data retrieval call binding the contract method 0xf7d22190.
//
// Solidity: function resourceType() view returns(uint256)
func (_Task *TaskCallerSession) ResourceType() (*big.Int, error) {
	return _Task.Contract.ResourceType(&_Task.CallOpts)
}

// RewardTx is a free data retrieval call binding the contract method 0x2cae8b10.
//
// Solidity: function rewardTx() view returns(string)
func (_Task *TaskCaller) RewardTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "rewardTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RewardTx is a free data retrieval call binding the contract method 0x2cae8b10.
//
// Solidity: function rewardTx() view returns(string)
func (_Task *TaskSession) RewardTx() (string, error) {
	return _Task.Contract.RewardTx(&_Task.CallOpts)
}

// RewardTx is a free data retrieval call binding the contract method 0x2cae8b10.
//
// Solidity: function rewardTx() view returns(string)
func (_Task *TaskCallerSession) RewardTx() (string, error) {
	return _Task.Contract.RewardTx(&_Task.CallOpts)
}

// SlashTx is a free data retrieval call binding the contract method 0x4dc17e58.
//
// Solidity: function slashTx() view returns(string)
func (_Task *TaskCaller) SlashTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "slashTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SlashTx is a free data retrieval call binding the contract method 0x4dc17e58.
//
// Solidity: function slashTx() view returns(string)
func (_Task *TaskSession) SlashTx() (string, error) {
	return _Task.Contract.SlashTx(&_Task.CallOpts)
}

// SlashTx is a free data retrieval call binding the contract method 0x4dc17e58.
//
// Solidity: function slashTx() view returns(string)
func (_Task *TaskCallerSession) SlashTx() (string, error) {
	return _Task.Contract.SlashTx(&_Task.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x200d2ed2.
//
// Solidity: function status() view returns(string)
func (_Task *TaskCaller) Status(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "status")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Status is a free data retrieval call binding the contract method 0x200d2ed2.
//
// Solidity: function status() view returns(string)
func (_Task *TaskSession) Status() (string, error) {
	return _Task.Contract.Status(&_Task.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x200d2ed2.
//
// Solidity: function status() view returns(string)
func (_Task *TaskCallerSession) Status() (string, error) {
	return _Task.Contract.Status(&_Task.CallOpts)
}

// TaskType is a free data retrieval call binding the contract method 0x8cf6f32c.
//
// Solidity: function taskType() view returns(uint256)
func (_Task *TaskCaller) TaskType(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "taskType")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TaskType is a free data retrieval call binding the contract method 0x8cf6f32c.
//
// Solidity: function taskType() view returns(uint256)
func (_Task *TaskSession) TaskType() (*big.Int, error) {
	return _Task.Contract.TaskType(&_Task.CallOpts)
}

// TaskType is a free data retrieval call binding the contract method 0x8cf6f32c.
//
// Solidity: function taskType() view returns(uint256)
func (_Task *TaskCallerSession) TaskType() (*big.Int, error) {
	return _Task.Contract.TaskType(&_Task.CallOpts)
}

// UnlockFundTx is a free data retrieval call binding the contract method 0xec218dc4.
//
// Solidity: function unlockFundTx() view returns(string)
func (_Task *TaskCaller) UnlockFundTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "unlockFundTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UnlockFundTx is a free data retrieval call binding the contract method 0xec218dc4.
//
// Solidity: function unlockFundTx() view returns(string)
func (_Task *TaskSession) UnlockFundTx() (string, error) {
	return _Task.Contract.UnlockFundTx(&_Task.CallOpts)
}

// UnlockFundTx is a free data retrieval call binding the contract method 0xec218dc4.
//
// Solidity: function unlockFundTx() view returns(string)
func (_Task *TaskCallerSession) UnlockFundTx() (string, error) {
	return _Task.Contract.UnlockFundTx(&_Task.CallOpts)
}

// VerifyParam is a free data retrieval call binding the contract method 0x497153e3.
//
// Solidity: function verifyParam() view returns(string)
func (_Task *TaskCaller) VerifyParam(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "verifyParam")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VerifyParam is a free data retrieval call binding the contract method 0x497153e3.
//
// Solidity: function verifyParam() view returns(string)
func (_Task *TaskSession) VerifyParam() (string, error) {
	return _Task.Contract.VerifyParam(&_Task.CallOpts)
}

// VerifyParam is a free data retrieval call binding the contract method 0x497153e3.
//
// Solidity: function verifyParam() view returns(string)
func (_Task *TaskCallerSession) VerifyParam() (string, error) {
	return _Task.Contract.VerifyParam(&_Task.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Task *TaskCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Task.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Task *TaskSession) Version() (string, error) {
	return _Task.Contract.Version(&_Task.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Task *TaskCallerSession) Version() (string, error) {
	return _Task.Contract.Version(&_Task.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Task *TaskTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Task *TaskSession) RenounceOwnership() (*types.Transaction, error) {
	return _Task.Contract.RenounceOwnership(&_Task.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Task *TaskTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Task.Contract.RenounceOwnership(&_Task.TransactOpts)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x2c2e8faf.
//
// Solidity: function submitProof(string _proof) returns()
func (_Task *TaskTransactor) SubmitProof(opts *bind.TransactOpts, _proof string) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "submitProof", _proof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x2c2e8faf.
//
// Solidity: function submitProof(string _proof) returns()
func (_Task *TaskSession) SubmitProof(_proof string) (*types.Transaction, error) {
	return _Task.Contract.SubmitProof(&_Task.TransactOpts, _proof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x2c2e8faf.
//
// Solidity: function submitProof(string _proof) returns()
func (_Task *TaskTransactorSession) SubmitProof(_proof string) (*types.Transaction, error) {
	return _Task.Contract.SubmitProof(&_Task.TransactOpts, _proof)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Task *TaskTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Task *TaskSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Task.Contract.TransferOwnership(&_Task.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Task *TaskTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Task.Contract.TransferOwnership(&_Task.TransactOpts, newOwner)
}

// UpdateChallengeAndStatus is a paid mutator transaction binding the contract method 0x6b24e930.
//
// Solidity: function updateChallengeAndStatus(string _challengeTx, string _status) returns()
func (_Task *TaskTransactor) UpdateChallengeAndStatus(opts *bind.TransactOpts, _challengeTx string, _status string) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "updateChallengeAndStatus", _challengeTx, _status)
}

// UpdateChallengeAndStatus is a paid mutator transaction binding the contract method 0x6b24e930.
//
// Solidity: function updateChallengeAndStatus(string _challengeTx, string _status) returns()
func (_Task *TaskSession) UpdateChallengeAndStatus(_challengeTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateChallengeAndStatus(&_Task.TransactOpts, _challengeTx, _status)
}

// UpdateChallengeAndStatus is a paid mutator transaction binding the contract method 0x6b24e930.
//
// Solidity: function updateChallengeAndStatus(string _challengeTx, string _status) returns()
func (_Task *TaskTransactorSession) UpdateChallengeAndStatus(_challengeTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateChallengeAndStatus(&_Task.TransactOpts, _challengeTx, _status)
}

// UpdateLockAndStatus is a paid mutator transaction binding the contract method 0x4ad45b32.
//
// Solidity: function updateLockAndStatus(string _lockFundTx, string _status) returns()
func (_Task *TaskTransactor) UpdateLockAndStatus(opts *bind.TransactOpts, _lockFundTx string, _status string) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "updateLockAndStatus", _lockFundTx, _status)
}

// UpdateLockAndStatus is a paid mutator transaction binding the contract method 0x4ad45b32.
//
// Solidity: function updateLockAndStatus(string _lockFundTx, string _status) returns()
func (_Task *TaskSession) UpdateLockAndStatus(_lockFundTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateLockAndStatus(&_Task.TransactOpts, _lockFundTx, _status)
}

// UpdateLockAndStatus is a paid mutator transaction binding the contract method 0x4ad45b32.
//
// Solidity: function updateLockAndStatus(string _lockFundTx, string _status) returns()
func (_Task *TaskTransactorSession) UpdateLockAndStatus(_lockFundTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateLockAndStatus(&_Task.TransactOpts, _lockFundTx, _status)
}

// UpdateRewardAndStatus is a paid mutator transaction binding the contract method 0xb07d7f52.
//
// Solidity: function updateRewardAndStatus(string _rewardTx, string _status) returns()
func (_Task *TaskTransactor) UpdateRewardAndStatus(opts *bind.TransactOpts, _rewardTx string, _status string) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "updateRewardAndStatus", _rewardTx, _status)
}

// UpdateRewardAndStatus is a paid mutator transaction binding the contract method 0xb07d7f52.
//
// Solidity: function updateRewardAndStatus(string _rewardTx, string _status) returns()
func (_Task *TaskSession) UpdateRewardAndStatus(_rewardTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateRewardAndStatus(&_Task.TransactOpts, _rewardTx, _status)
}

// UpdateRewardAndStatus is a paid mutator transaction binding the contract method 0xb07d7f52.
//
// Solidity: function updateRewardAndStatus(string _rewardTx, string _status) returns()
func (_Task *TaskTransactorSession) UpdateRewardAndStatus(_rewardTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateRewardAndStatus(&_Task.TransactOpts, _rewardTx, _status)
}

// UpdateSlashAndStatus is a paid mutator transaction binding the contract method 0x1382fe66.
//
// Solidity: function updateSlashAndStatus(string _slashTx, string _status) returns()
func (_Task *TaskTransactor) UpdateSlashAndStatus(opts *bind.TransactOpts, _slashTx string, _status string) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "updateSlashAndStatus", _slashTx, _status)
}

// UpdateSlashAndStatus is a paid mutator transaction binding the contract method 0x1382fe66.
//
// Solidity: function updateSlashAndStatus(string _slashTx, string _status) returns()
func (_Task *TaskSession) UpdateSlashAndStatus(_slashTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateSlashAndStatus(&_Task.TransactOpts, _slashTx, _status)
}

// UpdateSlashAndStatus is a paid mutator transaction binding the contract method 0x1382fe66.
//
// Solidity: function updateSlashAndStatus(string _slashTx, string _status) returns()
func (_Task *TaskTransactorSession) UpdateSlashAndStatus(_slashTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateSlashAndStatus(&_Task.TransactOpts, _slashTx, _status)
}

// UpdateUnlockAndStatus is a paid mutator transaction binding the contract method 0xb0a40371.
//
// Solidity: function updateUnlockAndStatus(string _unlockFundTx, string _status) returns()
func (_Task *TaskTransactor) UpdateUnlockAndStatus(opts *bind.TransactOpts, _unlockFundTx string, _status string) (*types.Transaction, error) {
	return _Task.contract.Transact(opts, "updateUnlockAndStatus", _unlockFundTx, _status)
}

// UpdateUnlockAndStatus is a paid mutator transaction binding the contract method 0xb0a40371.
//
// Solidity: function updateUnlockAndStatus(string _unlockFundTx, string _status) returns()
func (_Task *TaskSession) UpdateUnlockAndStatus(_unlockFundTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateUnlockAndStatus(&_Task.TransactOpts, _unlockFundTx, _status)
}

// UpdateUnlockAndStatus is a paid mutator transaction binding the contract method 0xb0a40371.
//
// Solidity: function updateUnlockAndStatus(string _unlockFundTx, string _status) returns()
func (_Task *TaskTransactorSession) UpdateUnlockAndStatus(_unlockFundTx string, _status string) (*types.Transaction, error) {
	return _Task.Contract.UpdateUnlockAndStatus(&_Task.TransactOpts, _unlockFundTx, _status)
}

// TaskChallengeAndStatusUpdatedIterator is returned from FilterChallengeAndStatusUpdated and is used to iterate over the raw logs and unpacked data for ChallengeAndStatusUpdated events raised by the Task contract.
type TaskChallengeAndStatusUpdatedIterator struct {
	Event *TaskChallengeAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskChallengeAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskChallengeAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskChallengeAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskChallengeAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskChallengeAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskChallengeAndStatusUpdated represents a ChallengeAndStatusUpdated event raised by the Task contract.
type TaskChallengeAndStatusUpdated struct {
	ChallengeTx string
	Status      string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeAndStatusUpdated is a free log retrieval operation binding the contract event 0x37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f5.
//
// Solidity: event ChallengeAndStatusUpdated(string challengeTx, string status)
func (_Task *TaskFilterer) FilterChallengeAndStatusUpdated(opts *bind.FilterOpts) (*TaskChallengeAndStatusUpdatedIterator, error) {

	logs, sub, err := _Task.contract.FilterLogs(opts, "ChallengeAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &TaskChallengeAndStatusUpdatedIterator{contract: _Task.contract, event: "ChallengeAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchChallengeAndStatusUpdated is a free log subscription operation binding the contract event 0x37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f5.
//
// Solidity: event ChallengeAndStatusUpdated(string challengeTx, string status)
func (_Task *TaskFilterer) WatchChallengeAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *TaskChallengeAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Task.contract.WatchLogs(opts, "ChallengeAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskChallengeAndStatusUpdated)
				if err := _Task.contract.UnpackLog(event, "ChallengeAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeAndStatusUpdated is a log parse operation binding the contract event 0x37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f5.
//
// Solidity: event ChallengeAndStatusUpdated(string challengeTx, string status)
func (_Task *TaskFilterer) ParseChallengeAndStatusUpdated(log types.Log) (*TaskChallengeAndStatusUpdated, error) {
	event := new(TaskChallengeAndStatusUpdated)
	if err := _Task.contract.UnpackLog(event, "ChallengeAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskLockAndStatusUpdatedIterator is returned from FilterLockAndStatusUpdated and is used to iterate over the raw logs and unpacked data for LockAndStatusUpdated events raised by the Task contract.
type TaskLockAndStatusUpdatedIterator struct {
	Event *TaskLockAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskLockAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskLockAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskLockAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskLockAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskLockAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskLockAndStatusUpdated represents a LockAndStatusUpdated event raised by the Task contract.
type TaskLockAndStatusUpdated struct {
	LockFundTx string
	Status     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLockAndStatusUpdated is a free log retrieval operation binding the contract event 0xeb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2.
//
// Solidity: event LockAndStatusUpdated(string lockFundTx, string status)
func (_Task *TaskFilterer) FilterLockAndStatusUpdated(opts *bind.FilterOpts) (*TaskLockAndStatusUpdatedIterator, error) {

	logs, sub, err := _Task.contract.FilterLogs(opts, "LockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &TaskLockAndStatusUpdatedIterator{contract: _Task.contract, event: "LockAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchLockAndStatusUpdated is a free log subscription operation binding the contract event 0xeb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2.
//
// Solidity: event LockAndStatusUpdated(string lockFundTx, string status)
func (_Task *TaskFilterer) WatchLockAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *TaskLockAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Task.contract.WatchLogs(opts, "LockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskLockAndStatusUpdated)
				if err := _Task.contract.UnpackLog(event, "LockAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockAndStatusUpdated is a log parse operation binding the contract event 0xeb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2.
//
// Solidity: event LockAndStatusUpdated(string lockFundTx, string status)
func (_Task *TaskFilterer) ParseLockAndStatusUpdated(log types.Log) (*TaskLockAndStatusUpdated, error) {
	event := new(TaskLockAndStatusUpdated)
	if err := _Task.contract.UnpackLog(event, "LockAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Task contract.
type TaskOwnershipTransferredIterator struct {
	Event *TaskOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskOwnershipTransferred represents a OwnershipTransferred event raised by the Task contract.
type TaskOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Task *TaskFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TaskOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Task.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TaskOwnershipTransferredIterator{contract: _Task.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Task *TaskFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TaskOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Task.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskOwnershipTransferred)
				if err := _Task.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Task *TaskFilterer) ParseOwnershipTransferred(log types.Log) (*TaskOwnershipTransferred, error) {
	event := new(TaskOwnershipTransferred)
	if err := _Task.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskRewardAndStatusUpdatedIterator is returned from FilterRewardAndStatusUpdated and is used to iterate over the raw logs and unpacked data for RewardAndStatusUpdated events raised by the Task contract.
type TaskRewardAndStatusUpdatedIterator struct {
	Event *TaskRewardAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskRewardAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskRewardAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskRewardAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskRewardAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskRewardAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskRewardAndStatusUpdated represents a RewardAndStatusUpdated event raised by the Task contract.
type TaskRewardAndStatusUpdated struct {
	RewardTx string
	Status   string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRewardAndStatusUpdated is a free log retrieval operation binding the contract event 0x6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f.
//
// Solidity: event RewardAndStatusUpdated(string rewardTx, string status)
func (_Task *TaskFilterer) FilterRewardAndStatusUpdated(opts *bind.FilterOpts) (*TaskRewardAndStatusUpdatedIterator, error) {

	logs, sub, err := _Task.contract.FilterLogs(opts, "RewardAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &TaskRewardAndStatusUpdatedIterator{contract: _Task.contract, event: "RewardAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardAndStatusUpdated is a free log subscription operation binding the contract event 0x6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f.
//
// Solidity: event RewardAndStatusUpdated(string rewardTx, string status)
func (_Task *TaskFilterer) WatchRewardAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *TaskRewardAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Task.contract.WatchLogs(opts, "RewardAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskRewardAndStatusUpdated)
				if err := _Task.contract.UnpackLog(event, "RewardAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardAndStatusUpdated is a log parse operation binding the contract event 0x6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f.
//
// Solidity: event RewardAndStatusUpdated(string rewardTx, string status)
func (_Task *TaskFilterer) ParseRewardAndStatusUpdated(log types.Log) (*TaskRewardAndStatusUpdated, error) {
	event := new(TaskRewardAndStatusUpdated)
	if err := _Task.contract.UnpackLog(event, "RewardAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskSlashAndStatusUpdatedIterator is returned from FilterSlashAndStatusUpdated and is used to iterate over the raw logs and unpacked data for SlashAndStatusUpdated events raised by the Task contract.
type TaskSlashAndStatusUpdatedIterator struct {
	Event *TaskSlashAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskSlashAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskSlashAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskSlashAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskSlashAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskSlashAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskSlashAndStatusUpdated represents a SlashAndStatusUpdated event raised by the Task contract.
type TaskSlashAndStatusUpdated struct {
	SlashTx string
	Status  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSlashAndStatusUpdated is a free log retrieval operation binding the contract event 0x14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f.
//
// Solidity: event SlashAndStatusUpdated(string slashTx, string status)
func (_Task *TaskFilterer) FilterSlashAndStatusUpdated(opts *bind.FilterOpts) (*TaskSlashAndStatusUpdatedIterator, error) {

	logs, sub, err := _Task.contract.FilterLogs(opts, "SlashAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &TaskSlashAndStatusUpdatedIterator{contract: _Task.contract, event: "SlashAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchSlashAndStatusUpdated is a free log subscription operation binding the contract event 0x14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f.
//
// Solidity: event SlashAndStatusUpdated(string slashTx, string status)
func (_Task *TaskFilterer) WatchSlashAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *TaskSlashAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Task.contract.WatchLogs(opts, "SlashAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskSlashAndStatusUpdated)
				if err := _Task.contract.UnpackLog(event, "SlashAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashAndStatusUpdated is a log parse operation binding the contract event 0x14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f.
//
// Solidity: event SlashAndStatusUpdated(string slashTx, string status)
func (_Task *TaskFilterer) ParseSlashAndStatusUpdated(log types.Log) (*TaskSlashAndStatusUpdated, error) {
	event := new(TaskSlashAndStatusUpdated)
	if err := _Task.contract.UnpackLog(event, "SlashAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskSubmitProofIterator is returned from FilterSubmitProof and is used to iterate over the raw logs and unpacked data for SubmitProof events raised by the Task contract.
type TaskSubmitProofIterator struct {
	Event *TaskSubmitProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskSubmitProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskSubmitProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskSubmitProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskSubmitProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskSubmitProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskSubmitProof represents a SubmitProof event raised by the Task contract.
type TaskSubmitProof struct {
	Proof string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterSubmitProof is a free log retrieval operation binding the contract event 0x67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f.
//
// Solidity: event SubmitProof(string proof)
func (_Task *TaskFilterer) FilterSubmitProof(opts *bind.FilterOpts) (*TaskSubmitProofIterator, error) {

	logs, sub, err := _Task.contract.FilterLogs(opts, "SubmitProof")
	if err != nil {
		return nil, err
	}
	return &TaskSubmitProofIterator{contract: _Task.contract, event: "SubmitProof", logs: logs, sub: sub}, nil
}

// WatchSubmitProof is a free log subscription operation binding the contract event 0x67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f.
//
// Solidity: event SubmitProof(string proof)
func (_Task *TaskFilterer) WatchSubmitProof(opts *bind.WatchOpts, sink chan<- *TaskSubmitProof) (event.Subscription, error) {

	logs, sub, err := _Task.contract.WatchLogs(opts, "SubmitProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskSubmitProof)
				if err := _Task.contract.UnpackLog(event, "SubmitProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitProof is a log parse operation binding the contract event 0x67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f.
//
// Solidity: event SubmitProof(string proof)
func (_Task *TaskFilterer) ParseSubmitProof(log types.Log) (*TaskSubmitProof, error) {
	event := new(TaskSubmitProof)
	if err := _Task.contract.UnpackLog(event, "SubmitProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TaskUnlockAndStatusUpdatedIterator is returned from FilterUnlockAndStatusUpdated and is used to iterate over the raw logs and unpacked data for UnlockAndStatusUpdated events raised by the Task contract.
type TaskUnlockAndStatusUpdatedIterator struct {
	Event *TaskUnlockAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskUnlockAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskUnlockAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskUnlockAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskUnlockAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskUnlockAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskUnlockAndStatusUpdated represents a UnlockAndStatusUpdated event raised by the Task contract.
type TaskUnlockAndStatusUpdated struct {
	UnlockFundTx string
	Status       string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUnlockAndStatusUpdated is a free log retrieval operation binding the contract event 0xa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa.
//
// Solidity: event UnlockAndStatusUpdated(string unlockFundTx, string status)
func (_Task *TaskFilterer) FilterUnlockAndStatusUpdated(opts *bind.FilterOpts) (*TaskUnlockAndStatusUpdatedIterator, error) {

	logs, sub, err := _Task.contract.FilterLogs(opts, "UnlockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &TaskUnlockAndStatusUpdatedIterator{contract: _Task.contract, event: "UnlockAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchUnlockAndStatusUpdated is a free log subscription operation binding the contract event 0xa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa.
//
// Solidity: event UnlockAndStatusUpdated(string unlockFundTx, string status)
func (_Task *TaskFilterer) WatchUnlockAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *TaskUnlockAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Task.contract.WatchLogs(opts, "UnlockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskUnlockAndStatusUpdated)
				if err := _Task.contract.UnpackLog(event, "UnlockAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockAndStatusUpdated is a log parse operation binding the contract event 0xa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa.
//
// Solidity: event UnlockAndStatusUpdated(string unlockFundTx, string status)
func (_Task *TaskFilterer) ParseUnlockAndStatusUpdated(log types.Log) (*TaskUnlockAndStatusUpdated, error) {
	event := new(TaskUnlockAndStatusUpdated)
	if err := _Task.contract.UnpackLog(event, "UnlockAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
